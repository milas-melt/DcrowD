// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeesWithdrawn extends ethereum.Event {
  get params(): FeesWithdrawn__Params {
    return new FeesWithdrawn__Params(this);
  }
}

export class FeesWithdrawn__Params {
  _event: FeesWithdrawn;

  constructor(event: FeesWithdrawn) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingCancelled extends ethereum.Event {
  get params(): FundingCancelled__Params {
    return new FundingCancelled__Params(this);
  }
}

export class FundingCancelled__Params {
  _event: FundingCancelled;

  constructor(event: FundingCancelled) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get funder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsCollected extends ethereum.Event {
  get params(): FundsCollected__Params {
    return new FundsCollected__Params(this);
  }
}

export class FundsCollected__Params {
  _event: FundsCollected;

  constructor(event: FundsCollected) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get funds(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProjectCreated extends ethereum.Event {
  get params(): ProjectCreated__Params {
    return new ProjectCreated__Params(this);
  }
}

export class ProjectCreated__Params {
  _event: ProjectCreated;

  constructor(event: ProjectCreated) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get expires(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get goal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ProjectFunded extends ethereum.Event {
  get params(): ProjectFunded__Params {
    return new ProjectFunded__Params(this);
  }
}

export class ProjectFunded__Params {
  _event: ProjectFunded;

  constructor(event: ProjectFunded) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get funder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Dcrowd__projectInfoResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get expires(): BigInt {
    return this[1].toBigInt();
  }

  get funded(): boolean {
    return this[2].toBoolean();
  }

  get goal(): BigInt {
    return this[3].toBigInt();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }
}

export class Dcrowd extends ethereum.SmartContract {
  static bind(address: Address): Dcrowd {
    return new Dcrowd("Dcrowd", address);
  }

  FEE_DENOMINATOR(): i32 {
    let result = super.call(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_FEE_DENOMINATOR(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  createProject(expires: BigInt, goal: BigInt, uri: string): BigInt {
    let result = super.call(
      "createProject",
      "createProject(uint64,uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(expires),
        ethereum.Value.fromUnsignedBigInt(goal),
        ethereum.Value.fromString(uri)
      ]
    );

    return result[0].toBigInt();
  }

  try_createProject(
    expires: BigInt,
    goal: BigInt,
    uri: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProject",
      "createProject(uint64,uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(expires),
        ethereum.Value.fromUnsignedBigInt(goal),
        ethereum.Value.fromString(uri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeBalance(): BigInt {
    let result = super.call("feeBalance", "feeBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeBalance", "feeBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  funding(funder: Address, projectId: BigInt): BigInt {
    let result = super.call("funding", "funding(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(funder),
      ethereum.Value.fromUnsignedBigInt(projectId)
    ]);

    return result[0].toBigInt();
  }

  try_funding(funder: Address, projectId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "funding",
      "funding(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(funder),
        ethereum.Value.fromUnsignedBigInt(projectId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectCounter(): BigInt {
    let result = super.call("projectCounter", "projectCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_projectCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectCounter",
      "projectCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectInfo(projectId: BigInt): Dcrowd__projectInfoResultValue0Struct {
    let result = super.call(
      "projectInfo",
      "projectInfo(uint256):((address,uint64,bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );

    return changetype<Dcrowd__projectInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_projectInfo(
    projectId: BigInt
  ): ethereum.CallResult<Dcrowd__projectInfoResultValue0Struct> {
    let result = super.tryCall(
      "projectInfo",
      "projectInfo(uint256):((address,uint64,bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Dcrowd__projectInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  projectURI(projectId: BigInt): string {
    let result = super.call("projectURI", "projectURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(projectId)
    ]);

    return result[0].toString();
  }

  try_projectURI(projectId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("projectURI", "projectURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(projectId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelFundingCall extends ethereum.Call {
  get inputs(): CancelFundingCall__Inputs {
    return new CancelFundingCall__Inputs(this);
  }

  get outputs(): CancelFundingCall__Outputs {
    return new CancelFundingCall__Outputs(this);
  }
}

export class CancelFundingCall__Inputs {
  _call: CancelFundingCall;

  constructor(call: CancelFundingCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelFundingCall__Outputs {
  _call: CancelFundingCall;

  constructor(call: CancelFundingCall) {
    this._call = call;
  }
}

export class CollectFundsCall extends ethereum.Call {
  get inputs(): CollectFundsCall__Inputs {
    return new CollectFundsCall__Inputs(this);
  }

  get outputs(): CollectFundsCall__Outputs {
    return new CollectFundsCall__Outputs(this);
  }
}

export class CollectFundsCall__Inputs {
  _call: CollectFundsCall;

  constructor(call: CollectFundsCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectFundsCall__Outputs {
  _call: CollectFundsCall;

  constructor(call: CollectFundsCall) {
    this._call = call;
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get expires(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get goal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FundProjectCall extends ethereum.Call {
  get inputs(): FundProjectCall__Inputs {
    return new FundProjectCall__Inputs(this);
  }

  get outputs(): FundProjectCall__Outputs {
    return new FundProjectCall__Outputs(this);
  }
}

export class FundProjectCall__Inputs {
  _call: FundProjectCall;

  constructor(call: FundProjectCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundProjectCall__Outputs {
  _call: FundProjectCall;

  constructor(call: FundProjectCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMaxFundingPeriodCall extends ethereum.Call {
  get inputs(): UpdateMaxFundingPeriodCall__Inputs {
    return new UpdateMaxFundingPeriodCall__Inputs(this);
  }

  get outputs(): UpdateMaxFundingPeriodCall__Outputs {
    return new UpdateMaxFundingPeriodCall__Outputs(this);
  }
}

export class UpdateMaxFundingPeriodCall__Inputs {
  _call: UpdateMaxFundingPeriodCall;

  constructor(call: UpdateMaxFundingPeriodCall) {
    this._call = call;
  }

  get newMaxFundingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxFundingPeriodCall__Outputs {
  _call: UpdateMaxFundingPeriodCall;

  constructor(call: UpdateMaxFundingPeriodCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeCall__Inputs {
    return new UpdatePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeCall__Outputs {
    return new UpdatePlatformFeeCall__Outputs(this);
  }
}

export class UpdatePlatformFeeCall__Inputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }

  get newPlatformFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdatePlatformFeeCall__Outputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
