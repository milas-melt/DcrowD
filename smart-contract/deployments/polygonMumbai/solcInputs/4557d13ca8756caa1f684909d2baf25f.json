{
  "language": "Solidity",
  "sources": {
    "contracts/Dcrowd.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IDcrowd.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract Dcrowd is IDcrowd, Ownable, ReentrancyGuard {\n    //----------------------------------------------------- constants\n\n    uint16 public constant FEE_DENOMINATOR = 10000;\n\n    //----------------------------------------------------- storage\n\n    uint256 private _projectCounter;\n\n    uint256 private _feeBalance;\n\n    uint64 private _maxFundingPeriod;\n\n    uint16 private _platformFee;\n\n    // project ID -> project info\n    mapping(uint256 => ProjectInfo) private _projectInfos;\n\n    // project ID -> project uri\n    mapping(uint256 => string) private _uris;\n\n    // funder address -> project ID -> amount funded\n    mapping(address => mapping(uint256 => uint256)) private _fundings;\n\n    // creator address -> rating\n    mapping(address => uint8) private _creatorRatings;\n\n    //----------------------------------------------------- misc functions\n\n    constructor() {\n        _projectCounter = 0;\n        _maxFundingPeriod = 100 days;\n        _platformFee = 0;\n    }\n\n    //----------------------------------------------------- creator functions\n\n    function createProject(\n        uint64 expires,\n        uint256 goal,\n        string calldata uri\n    ) external override returns (uint256) {\n        // expires valid\n        if (expires < block.timestamp || block.timestamp + _maxFundingPeriod < expires)\n            revert Dcrowd_InvalidExpires(expires);\n        // store project\n        uint256 projectId = _projectCounter++;\n        _projectInfos[projectId] = ProjectInfo({\n            creator: _msgSender(),\n            expires: expires,\n            funded: false,\n            goal: goal,\n            balance: 0\n        });\n        _uris[projectId] = uri;\n        // emit and return\n        emit ProjectCreated(projectId, _msgSender(), expires, goal, uri);\n        return projectId;\n    }\n\n    function collectFunds(uint256 projectId) external override nonReentrant {\n        ProjectInfo memory project = _projectInfos[projectId];\n        // sender is creator\n        if (_msgSender() != project.creator) revert Dcrowd_NotProjectCreator(_msgSender());\n        // project is fully funded\n        if (project.balance < project.goal) revert Dcrowd_ProjectNotFunded(projectId);\n        // funds have not already been collected\n        if (project.funded) revert Dcrowd_ProjectAlreadyFunded(projectId);\n        // update storage\n        _projectInfos[projectId].funded = true;\n        // compute fees\n        uint256 fees = (project.balance * _platformFee) / FEE_DENOMINATOR;\n        uint256 valueToCreator = project.balance - fees;\n        // transfer funds\n        (bool success, ) = project.creator.call{value: valueToCreator, gas: 2300}(\"\");\n        if (!success) revert Dcrowd_TransferFailed(project.creator, valueToCreator);\n        _feeBalance += fees;\n        emit FundsCollected(projectId, project.creator, valueToCreator);\n    }\n\n    //----------------------------------------------------- funder functions\n\n    function fundProject(uint256 projectId) external payable override {\n        ProjectInfo memory project = _projectInfos[projectId];\n        // value is sent\n        if (msg.value == 0) revert Dcrowd_InsufficientAmount(msg.value, 1);\n        // project exists\n        if (project.creator == address(0)) revert Dcrowd_ProjectNotExists(projectId);\n        // project not funded\n        if (project.goal <= project.balance || project.funded)\n            revert Dcrowd_ProjectAlreadyFunded(projectId);\n        // funding not expired\n        if (project.expires < block.timestamp) revert Dcrowd_ProjectFundingExpired(projectId);\n        // update storage\n        _projectInfos[projectId].balance += msg.value;\n        _fundings[_msgSender()][projectId] += msg.value;\n        emit ProjectFunded(projectId, _msgSender(), msg.value);\n    }\n\n    function cancelFunding(uint256 projectId, uint256 amount) external override {\n        ProjectInfo memory project = _projectInfos[projectId];\n        uint256 funding_ = _fundings[_msgSender()][projectId];\n        // project exists\n        if (project.creator == address(0)) revert Dcrowd_ProjectNotExists(projectId);\n        // project not funded\n        if (project.funded) revert Dcrowd_ProjectAlreadyFunded(projectId);\n        // sender has funded\n        if (funding_ < amount || amount == 0) revert Dcrowd_InsufficientAmount(amount, funding_);\n        // transfer funds\n        (bool success, ) = _msgSender().call{value: amount, gas: 2300}(\"\");\n        if (!success) revert Dcrowd_TransferFailed(_msgSender(), amount);\n        emit FundingCancelled(projectId, _msgSender(), amount);\n    }\n\n    //----------------------------------------------------- owner functions\n\n    function withdrawFees(address to) external override onlyOwner {\n        // there are fees to transfer\n        uint256 balance = _feeBalance;\n        if (balance == 0) revert Dcrowd_InsufficientAmount(balance, 1);\n        // cannot transfer to zero address\n        if (to == address(0)) revert Dcrowd_InvalidAddress(to);\n        _feeBalance = 0;\n        // transfer fees\n        (bool success, ) = to.call{value: balance, gas: 2300}(\"\");\n        if (!success) revert Dcrowd_TransferFailed(to, balance);\n        emit FeesWithdrawn(to, balance);\n    }\n\n    function updateCreatorRating(address creator, uint8 rating) external override onlyOwner {\n        _creatorRatings[creator] = rating;\n        emit CreatorRatingUpdated(creator, rating);\n    }\n\n    function updateMaxFundingPeriod(uint64 newMaxFundingPeriod) external override onlyOwner {\n        _maxFundingPeriod = newMaxFundingPeriod;\n    }\n\n    function updatePlatformFee(uint16 newPlatformFee) external override onlyOwner {\n        if (FEE_DENOMINATOR < newPlatformFee) revert();\n        _platformFee = newPlatformFee;\n    }\n\n    //----------------------------------------------------- accessor functions\n\n    function feeBalance() external view override returns (uint256) {\n        return _feeBalance;\n    }\n\n    function creatorRating(address creator) external view override returns (uint8) {\n        return _creatorRatings[creator];\n    }\n\n    function projectCounter() external view override returns (uint256) {\n        return _projectCounter;\n    }\n\n    function projectInfo(uint256 projectId) external view override returns (ProjectInfo memory) {\n        return _projectInfos[projectId];\n    }\n\n    function projectURI(uint256 projectId) external view override returns (string memory) {\n        return _uris[projectId];\n    }\n\n    function funding(address funder, uint256 projectId) external view override returns (uint256) {\n        return _fundings[funder][projectId];\n    }\n\n    function maxFundingPeriod() external view override returns (uint64) {\n        return _maxFundingPeriod;\n    }\n\n    function platformFee() external view override returns (uint16) {\n        return _platformFee;\n    }\n}\n"
    },
    "contracts/interfaces/IDcrowd.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nerror Dcrowd_InvalidExpires(uint256 expires);\nerror Dcrowd_ProjectNotExists(uint256 projectId);\nerror Dcrowd_ProjectAlreadyFunded(uint256 projectId);\nerror Dcrowd_NotProjectCreator(address sender);\nerror Dcrowd_ProjectNotFunded(uint256 projectId);\nerror Dcrowd_TransferFailed(address to, uint256 value);\nerror Dcrowd_ProjectFundingExpired(uint256 projectId);\nerror Dcrowd_InsufficientAmount(uint256 actual, uint256 expected);\nerror Dcrowd_InvalidAddress(address addr);\n\n/// @title Crowd Funding Contract\n/// @author Nicolas Bayle\ninterface IDcrowd {\n    //----------------------------------------------------- structs\n\n    struct ProjectInfo {\n        // creator of the project\n        address creator;\n        // UNIX timestamp, given by `block.timestamp`, end of funding period\n        uint64 expires;\n        // if the funds have been transferred to the project creator\n        bool funded;\n        // project funds goal\n        uint256 goal;\n        // current funds of the project\n        uint256 balance;\n    }\n\n    //----------------------------------------------------- events\n\n    event ProjectCreated(\n        uint256 indexed projectId,\n        address indexed creator,\n        uint64 indexed expires,\n        uint256 goal,\n        string uri\n    );\n\n    event FundsCollected(uint256 indexed projectId, address indexed creator, uint256 funds);\n\n    event ProjectFunded(uint256 indexed projectId, address indexed funder, uint256 amount);\n\n    event FundingCancelled(uint256 indexed projectId, address indexed funder, uint256 amount);\n\n    event CreatorRatingUpdated(address indexed creator, uint8 rating);\n\n    event FeesWithdrawn(address indexed to, uint256 amount);\n\n    //----------------------------------------------------- creator functions\n\n    /// @param expires UNIX timextamp, end of the funding period of the project.\n    /// @return Project ID\n    function createProject(\n        uint64 expires,\n        uint256 goal,\n        string calldata uri\n    ) external returns (uint256);\n\n    function collectFunds(uint256 projectId) external;\n\n    //----------------------------------------------------- funder functions\n\n    function fundProject(uint256 projectId) external payable;\n\n    function cancelFunding(uint256 projectId, uint256 amount) external;\n\n    //----------------------------------------------------- owner functions\n\n    function withdrawFees(address to) external;\n\n    function updateCreatorRating(address creator, uint8 rating) external;\n\n    function updateMaxFundingPeriod(uint64 newMaxFundingPeriod) external;\n\n    function updatePlatformFee(uint16 newPlatformFee) external;\n\n    //----------------------------------------------------- accessor functions\n\n    function feeBalance() external view returns (uint256);\n\n    function creatorRating(address creator) external view returns (uint8);\n\n    function projectCounter() external view returns (uint256);\n\n    function projectInfo(uint256 projectId) external view returns (ProjectInfo memory);\n\n    function projectURI(uint256 projectId) external view returns (string memory);\n\n    function funding(address funder, uint256 projectId) external view returns (uint256);\n\n    function maxFundingPeriod() external view returns (uint64);\n\n    function platformFee() external view returns (uint16);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}