import { Narrow, TypedData, TypedDataDomain, TypedDataToPrimitiveTypes } from 'abitype';
export declare type SignTypedDataArgs<TTypedData = unknown> = {
    /** Domain or domain signature for origin or contract */
    domain: TypedDataDomain;
    /** Named list of all type definitions */
    types: Narrow<TTypedData>;
} & (TTypedData extends TypedData ? TypedDataToPrimitiveTypes<TTypedData> extends infer TSchema ? TSchema[keyof TSchema] extends infer TValue ? {
    [key: string]: any;
} extends TValue ? {
    /**
     * Data to sign
     *
     * Use a [const assertion](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions) on {@link types} for type inference.
     */
    value: {
        [key: string]: unknown;
    };
} : {
    /** Data to sign */
    value: TValue;
} : never : never : never);
export declare type SignTypedDataResult = string;
export declare function signTypedData<TTypedData extends TypedData>({ domain, types, value, }: SignTypedDataArgs<TTypedData>): Promise<SignTypedDataResult>;
