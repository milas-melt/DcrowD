import { Abi } from 'abitype';
import { ContractsConfig, ContractsResult, DefaultOptions, GetOverridesForAbiStateMutability, Options as Options_ } from '../../types/contracts';
declare type Options = Options_ & {
    isContractsOptional?: boolean;
};
export declare type ReadContractsConfig<TContracts extends unknown[], TOptions extends Options = DefaultOptions, _Contracts = readonly [
    ...ContractsConfig<TContracts, {
        /** Chain id to use for provider */
        chainId?: number;
    }, TOptions>
]> = {
    /** Failures in the multicall will fail silently */
    allowFailure?: boolean;
    /** Call overrides */
    overrides?: GetOverridesForAbiStateMutability<'pure' | 'view'>;
} & (TOptions['isContractsOptional'] extends true ? {
    /** Contracts to query */
    contracts?: _Contracts;
} : {
    /** Contracts to query */
    contracts: _Contracts;
});
export declare type ReadContractsResult<TContracts extends unknown[]> = ContractsResult<TContracts>;
export declare function readContracts<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TContracts extends {
    abi: TAbi;
    functionName: TFunctionName;
}[]>({ allowFailure, contracts, overrides, }: ReadContractsConfig<TContracts>): Promise<ReadContractsResult<TContracts>>;
export {};
