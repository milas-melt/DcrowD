import { Abi } from 'abitype';
import { ContractsConfig, ContractsResult, GetOverridesForAbiStateMutability } from '../../types/contracts';
export declare type MulticallConfig<TContracts extends unknown[]> = {
    /** Failures in the multicall will fail silently */
    allowFailure?: boolean;
    /** Chain id to use for provider */
    chainId?: number;
    /** Contracts to query */
    contracts: readonly [...ContractsConfig<TContracts>];
    /** Call overrides */
    overrides?: GetOverridesForAbiStateMutability<'pure'> | GetOverridesForAbiStateMutability<'view'>;
};
export declare type MulticallResult<TContracts extends unknown[]> = ContractsResult<TContracts>;
export declare function multicall<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TContracts extends {
    abi: TAbi;
    functionName: TFunctionName;
}[]>({ allowFailure, chainId, contracts, overrides, }: MulticallConfig<TContracts>): Promise<MulticallResult<TContracts>>;
