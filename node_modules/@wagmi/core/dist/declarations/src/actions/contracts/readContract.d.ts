import { Abi } from 'abitype';
import { DefaultOptions, GetConfig, GetOverridesForAbiStateMutability, GetReturnType, Options } from '../../types/contracts';
export declare type ReadContractConfig<TAbi = Abi, TFunctionName = string, TOptions extends Options = DefaultOptions> = GetConfig<{
    abi: TAbi;
    functionName: TFunctionName;
    /** Chain id to use for provider */
    chainId?: number;
    /** Call overrides */
    overrides?: GetOverridesForAbiStateMutability<'pure' | 'view'>;
}, 'pure' | 'view', TOptions>;
export declare type ReadContractResult<TAbi = Abi, TFunctionName = string> = GetReturnType<{
    abi: TAbi;
    functionName: TFunctionName;
}>;
export declare function readContract<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ address, args, chainId, abi, functionName, overrides, }: ReadContractConfig<TAbi, TFunctionName>): Promise<ReadContractResult<TAbi, TFunctionName>>;
