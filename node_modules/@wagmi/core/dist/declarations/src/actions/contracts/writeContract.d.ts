import { Abi, Address, ExtractAbiFunction } from 'abitype';
import { PopulatedTransaction } from 'ethers';
import { Signer } from '../../types';
import { DefaultOptions, GetConfig, GetOverridesForAbiStateMutability, Options as Options_ } from '../../types/contracts';
import { SendTransactionResult } from '../transactions';
declare type Options = Options_ & {
    isRequestOptional?: boolean;
};
declare type Request = PopulatedTransaction & {
    to: Address;
    gasLimit: NonNullable<PopulatedTransaction['gasLimit']>;
};
export declare type WriteContractPreparedArgs<TOptions extends Options = DefaultOptions> = {
    /**
     * `recklesslyUnprepared`: Allow to pass through unprepared config. Note: This has
     * [UX pitfalls](https://wagmi.sh/docs/prepare-hooks/intro#ux-pitfalls-without-prepare-hooks),
     * it is highly recommended to not use this and instead prepare the request upfront
     * using the {@link prepareWriteContract} function.
     *
     * `prepared`: The request has been prepared with parameters required for sending a transaction
     * via the {@link prepareWriteContract} function
     * */
    mode: 'prepared';
    args?: never;
    overrides?: never;
} & (TOptions['isRequestOptional'] extends true ? {
    /** The prepared request. */
    request?: Request;
} : {
    /** The prepared request. */
    request: Request;
});
export declare type WriteContractUnpreparedArgs<TAbi = Abi, TFunctionName = string, TOptions extends Options = DefaultOptions> = {
    mode: 'recklesslyUnprepared';
    request?: never;
} & GetConfig<{
    abi: TAbi;
    functionName: TFunctionName;
    /** Call overrides */
    overrides?: GetOverridesForAbiStateMutability<[
        TAbi,
        TFunctionName
    ] extends [
        infer TAbi_ extends Abi,
        infer TFunctionName_ extends string
    ] ? ExtractAbiFunction<TAbi_, TFunctionName_>['stateMutability'] : 'nonpayable' | 'payable'>;
}, 'nonpayable' | 'payable', TOptions>;
export declare type WriteContractArgs<TAbi = Abi, TFunctionName = string, TOptions extends Options = DefaultOptions> = Omit<GetConfig<{
    abi: TAbi;
    functionName: TFunctionName;
    /** Chain id to use for provider */
    chainId?: number;
}, 'nonpayable' | 'payable', TOptions>, 'args'> & (WriteContractUnpreparedArgs<TAbi, TFunctionName, TOptions> | WriteContractPreparedArgs<TOptions>);
export declare type WriteContractResult = SendTransactionResult;
/**
 * @description Function to call a contract write method.
 *
 * It is recommended to pair this with the {@link prepareWriteContract} function
 * to avoid [UX pitfalls](https://wagmi.sh/docs/prepare-hooks/intro#ux-pitfalls-without-prepare-hooks).
 *
 * @example
 * import { prepareWriteContract, writeContract } from '@wagmi/core'
 *
 * const config = await prepareWriteContract({
 *   address: '0x...',
 *   abi: wagmiAbi,
 *   functionName: 'mint',
 * })
 * const result = await writeContract(config)
 */
export declare function writeContract<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TSigner extends Signer = Signer>({ address, args, chainId, abi, functionName, mode, overrides, request: request_, }: WriteContractArgs<TAbi, TFunctionName>): Promise<WriteContractResult>;
export {};
