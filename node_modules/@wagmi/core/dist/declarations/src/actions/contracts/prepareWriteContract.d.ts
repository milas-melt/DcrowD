import { Abi, Address, ExtractAbiFunction } from 'abitype';
import { PopulatedTransaction } from 'ethers/lib/ethers';
import { Signer } from '../../types';
import { DefaultOptions, GetConfig, GetOverridesForAbiStateMutability, Options } from '../../types/contracts';
export declare type PrepareWriteContractConfig<TAbi = Abi, TFunctionName = string, TSigner extends Signer = Signer, TOptions extends Options = DefaultOptions> = GetConfig<{
    abi: TAbi;
    functionName: TFunctionName;
    /** Chain id to use for provider */
    chainId?: number;
    /** Overrides */
    overrides?: GetOverridesForAbiStateMutability<[
        TAbi,
        TFunctionName
    ] extends [
        infer TAbi_ extends Abi,
        infer TFunctionName_ extends string
    ] ? ExtractAbiFunction<TAbi_, TFunctionName_>['stateMutability'] : 'nonpayable' | 'payable'>;
    /** Custom signer */
    signer?: TSigner | null;
}, 'nonpayable' | 'payable', TOptions>;
export declare type PrepareWriteContractResult<TAbi = Abi, TFunctionName extends string = string> = {
    abi: TAbi extends Abi ? [ExtractAbiFunction<TAbi, TFunctionName>] : readonly unknown[];
    address: string;
    chainId?: number;
    functionName: TFunctionName;
    mode: 'prepared';
    request: PopulatedTransaction & {
        to: Address;
        gasLimit: NonNullable<PopulatedTransaction['gasLimit']>;
    };
};
/**
 * @description Prepares the parameters required for a contract write transaction.
 *
 * Returns config to be passed through to `writeContract`.
 *
 * @example
 * import { prepareWriteContract, writeContract } from '@wagmi/core'
 *
 * const config = await prepareWriteContract({
 *  address: '0x...',
 *  abi: wagmiAbi,
 *  functionName: 'mint',
 * })
 * const result = await writeContract(config)
 */
export declare function prepareWriteContract<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TSigner extends Signer = Signer>({ abi, address, args, chainId, functionName, overrides, signer: signer_, }: PrepareWriteContractConfig<TAbi, TFunctionName, TSigner>): Promise<PrepareWriteContractResult<TAbi, TFunctionName>>;
