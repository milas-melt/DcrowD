import { WaitForTransactionArgs, WaitForTransactionResult } from '@wagmi/core';
import { QueryConfig } from '../../types';
export declare type UseWaitForTransactionArgs = Partial<WaitForTransactionArgs>;
export declare type UseWaitForTransactionConfig = QueryConfig<WaitForTransactionResult, Error>;
export declare const queryKey: ({ confirmations, chainId, hash, timeout, wait, }: Partial<WaitForTransactionArgs>) => readonly [{
    readonly entity: "waitForTransaction";
    readonly confirmations: number | undefined;
    readonly chainId: number | undefined;
    readonly hash: `0x${string}` | undefined;
    readonly timeout: number | undefined;
    readonly wait: ((confirmations?: number | undefined) => Promise<import("@ethersproject/providers").TransactionReceipt>) | undefined;
}];
export declare function useWaitForTransaction({ chainId: chainId_, confirmations, hash, timeout, wait, cacheTime, enabled, staleTime, suspense, onError, onSettled, onSuccess, }?: UseWaitForTransactionArgs & UseWaitForTransactionConfig): import("../utils/query/useQuery").UseQueryResult<import("@ethersproject/providers").TransactionReceipt, Error>;
