import { FetchTokenArgs, FetchTokenResult } from '@wagmi/core';
import { QueryConfig } from '../../types';
export declare type UseTokenArgs = Partial<FetchTokenArgs>;
export declare type UseTokenConfig = QueryConfig<FetchTokenResult, Error>;
export declare const queryKey: ({ address, chainId, formatUnits, }: Partial<FetchTokenArgs> & {
    chainId?: number | undefined;
}) => readonly [{
    readonly entity: "token";
    readonly address: `0x${string}` | undefined;
    readonly chainId: number | undefined;
    readonly formatUnits: number | "wei" | "kwei" | "mwei" | "gwei" | "szabo" | "finney" | "ether" | undefined;
}];
export declare function useToken({ address, chainId: chainId_, formatUnits, cacheTime, enabled, staleTime, // 24 hours
suspense, onError, onSettled, onSuccess, }?: UseTokenArgs & UseTokenConfig): import("../utils/query/useQuery").UseQueryResult<FetchTokenResult, Error>;
