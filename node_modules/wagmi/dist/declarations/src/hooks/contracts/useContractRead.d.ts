import { ReadContractConfig, ReadContractResult } from '@wagmi/core';
import { Abi } from 'abitype';
import { QueryConfig } from '../../types';
export declare type UseContractReadConfig<TAbi = Abi, TFunctionName = string> = ReadContractConfig<TAbi, TFunctionName, {
    isAbiOptional: true;
    isAddressOptional: true;
    isArgsOptional: true;
    isFunctionNameOptional: true;
}> & QueryConfig<ReadContractResult<TAbi, TFunctionName>, Error> & {
    /** If set to `true`, the cache will depend on the block number */
    cacheOnBlock?: boolean;
    /** Subscribe to changes */
    watch?: boolean;
};
export declare function useContractRead<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ abi, address, functionName, args, chainId: chainId_, overrides, cacheOnBlock, cacheTime, enabled: enabled_, isDataEqual, select, staleTime, suspense, watch, onError, onSettled, onSuccess, }?: UseContractReadConfig<TAbi, TFunctionName>): import("../utils/query/useQuery").UseQueryResult<import("@wagmi/core").GetReturnType<{
    abi: TAbi;
    functionName: TFunctionName;
}>, Error>;
