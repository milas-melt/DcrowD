import { PrepareWriteContractConfig, PrepareWriteContractResult } from '@wagmi/core';
import { Abi } from 'abitype';
import { Signer } from 'ethers';
import { QueryConfig } from '../../types';
export declare type UsePrepareContractWriteConfig<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string, TSigner extends Signer = Signer> = PrepareWriteContractConfig<TAbi, TFunctionName, TSigner, {
    isAbiOptional: true;
    isAddressOptional: true;
    isArgsOptional: true;
    isFunctionNameOptional: true;
}> & QueryConfig<PrepareWriteContractResult, Error>;
/**
 * @description Hook for preparing a contract write to be sent via [`useContractWrite`](/docs/hooks/useContractWrite).
 *
 * Eagerly fetches the parameters required for sending a contract write transaction such as the gas estimate.
 *
 * @example
 * import { useContractWrite, usePrepareContractWrite } from 'wagmi'
 *
 * const { config } = usePrepareContractWrite({
 *  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
 *  abi: wagmigotchiABI,
 *  functionName: 'feed',
 * })
 * const { data, isLoading, isSuccess, write } = useContractWrite(config)
 *
 */
export declare function usePrepareContractWrite<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ address, abi, functionName, chainId, args, overrides, cacheTime, enabled, staleTime, suspense, onError, onSettled, onSuccess, }?: UsePrepareContractWriteConfig<TAbi, TFunctionName>): Pick<import("@tanstack/react-query").QueryObserverResult<PrepareWriteContractResult<Abi, string>, Error>, "error" | "data" | "fetchStatus" | "isError" | "isFetched" | "isFetchedAfterMount" | "isFetching" | "isLoading" | "isRefetching" | "isSuccess" | "refetch"> & {
    isIdle: boolean;
    status: "error" | "success" | "idle" | "loading";
    internal: Pick<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>, "failureCount" | "isPaused" | "dataUpdatedAt" | "errorUpdatedAt" | "isLoadingError" | "isPlaceholderData" | "isPreviousData" | "isRefetchError" | "isStale" | "remove">;
} & {
    config: PrepareWriteContractResult<TAbi, TFunctionName>;
};
