import { AbiEventParametersToPrimitiveTypes, Event, IsNever, NotEqual, Or } from '@wagmi/core/internal';
import { Abi, AbiEvent, ExtractAbiEvent, ExtractAbiEventNames, Narrow } from 'abitype';
declare type GetListener<TAbiEvent extends AbiEvent, TAbi = unknown> = AbiEventParametersToPrimitiveTypes<TAbiEvent['inputs']> extends infer TArgs extends readonly unknown[] ? Or<IsNever<TArgs>, NotEqual<TAbi, Abi>> extends true ? {
    /**
     * Callback when event is emitted
     *
     * Use a [const assertion](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions) on {@link abi} for type inference.
     */
    listener: (...args: any) => void;
} : {
    /** Callback when event is emitted */
    listener: (...args: [...args: TArgs, event: Event<TAbiEvent>]) => void;
} : never;
declare type ContractEventConfig<TAbi extends Abi | readonly unknown[] = Abi, TEventName extends string = string, TEvent extends AbiEvent = TAbi extends Abi ? ExtractAbiEvent<TAbi, TEventName> : never> = {
    /** Contract address */
    address?: string;
    /** Contract ABI */
    abi?: Narrow<TAbi>;
    /** Chain id to use for provider */
    chainId?: number;
    /** Event to listen for */
    eventName?: IsNever<TEventName> extends true ? string : TEventName;
    /** Receive only a single event */
    once?: boolean;
} & GetListener<TEvent, TAbi>;
declare type GetConfig<T> = T extends {
    abi: infer TAbi extends Abi;
    eventName: infer TEventName extends string;
} ? ContractEventConfig<TAbi, ExtractAbiEventNames<TAbi>, ExtractAbiEvent<TAbi, TEventName>> : T extends {
    abi: infer TAbi extends readonly unknown[];
    eventName: infer TEventName extends string;
} ? ContractEventConfig<TAbi, TEventName> : ContractEventConfig;
export declare type UseContractEventConfig<TAbi = Abi, TEventName = string> = GetConfig<{
    abi: TAbi;
    eventName: TEventName;
}>;
export declare function useContractEvent<TAbi extends Abi | readonly unknown[], TEventName extends string>({ address, chainId, abi, listener, eventName, once, }?: UseContractEventConfig<TAbi, TEventName>): void;
export {};
