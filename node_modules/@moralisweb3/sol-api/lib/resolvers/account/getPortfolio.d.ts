import { Camelize } from '@moralisweb3/core';
import { SolAddress, SolAddressish, SolNative, SolNetworkish } from '@moralisweb3/sol-utils';
import { operations } from '../../generated/types';
declare type Operation = 'getPortfolio';
declare type PathParams = operations[Operation]['parameters']['path'];
declare type ApiParams = PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export declare const getPortfolio: import("@moralisweb3/api-utils").EndpointFactory<{
    address: string;
    network: "mainnet" | "devnet";
}, Params, {
    nativeBalance: {
        solana: string;
        lamports: string;
    };
    nfts: {
        associatedTokenAddress: string;
        mint: string;
    }[];
    tokens: {
        associatedTokenAddress: string;
        mint: string;
        amount: string;
        amountRaw: string;
        decimals: number;
    }[];
}, {
    nativeBalance: SolNative;
    nfts: {
        associatedTokenAddress: SolAddress;
        mint: SolAddress;
    }[];
    tokens: {
        associatedTokenAddress: SolAddress;
        mint: SolAddress;
        amount: SolNative;
    }[];
}, {
    nativeBalance: string;
    nfts: {
        associatedTokenAddress: string;
        mint: string;
    }[];
    tokens: {
        associatedTokenAddress: string;
        mint: string;
        amount: string;
    }[];
}>;
export {};
//# sourceMappingURL=getPortfolio.d.ts.map