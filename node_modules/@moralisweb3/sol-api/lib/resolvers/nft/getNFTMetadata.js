"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTMetadata = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var sol_utils_1 = require("@moralisweb3/sol-utils");
var SolNetworkResolver_1 = require("../SolNetworkResolver");
exports.getNFTMetadata = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getNFTMetadata',
        urlParams: ['network', 'address'],
        getUrl: function (params) {
            // TODO: here should be: const network = SolNetworkResolver.resolve(params.network, core);
            // but it's not working with Endpoints.getDescriptors(). After changes described in Endpoints
            // please replace this line.
            var network = params.network ? params.network : SolNetworkResolver_1.SolNetworkResolver.resolve(undefined, core);
            return "/nft/".concat(network, "/").concat(params.address, "/metadata");
        },
        apiToResult: function (data) {
            return {
                mint: sol_utils_1.SolAddress.create(data.mint),
                standard: data.standard,
                name: data.name,
                symbol: data.symbol,
                metaplex: {
                    metadataUri: data.metaplex.metadataUri,
                    updateAuthority: sol_utils_1.SolAddress.create(data.metaplex.updateAuthority),
                    sellerFeeBasisPoints: data.metaplex.sellerFeeBasisPoints,
                    primarySaleHappened: data.metaplex.primarySaleHappened,
                    isMutable: data.metaplex.isMutable,
                    masterEdition: data.metaplex.masterEdition,
                },
            };
        },
        resultToJson: function (data) {
            return {
                mint: data.mint.toJSON(),
                standard: data.standard,
                name: data.name,
                symbol: data.symbol,
                metaplex: {
                    metadataUri: data.metaplex.metadataUri,
                    updateAuthority: data.metaplex.updateAuthority.toJSON(),
                    sellerFeeBasisPoints: data.metaplex.sellerFeeBasisPoints,
                    primarySaleHappened: data.metaplex.primarySaleHappened,
                    isMutable: data.metaplex.isMutable,
                    masterEdition: data.metaplex.masterEdition,
                },
            };
        },
        parseParams: function (params) { return ({
            network: SolNetworkResolver_1.SolNetworkResolver.resolve(params.network, core),
            address: sol_utils_1.SolAddress.create(params.address).address,
        }); },
    });
});
//# sourceMappingURL=getNFTMetadata.js.map