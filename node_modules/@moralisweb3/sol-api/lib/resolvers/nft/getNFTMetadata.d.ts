import { Camelize } from '@moralisweb3/core';
import { SolAddress, SolAddressish, SolNetworkish } from '@moralisweb3/sol-utils';
import { operations } from '../../generated/types';
declare type Operation = 'getNFTMetadata';
declare type PathParams = operations[Operation]['parameters']['path'];
declare type ApiParams = PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export declare const getNFTMetadata: import("@moralisweb3/api-utils").EndpointFactory<{
    address: string;
    network: "mainnet" | "devnet";
}, Params, {
    mint: string;
    standard: string;
    name: string;
    symbol: string;
    metaplex: {
        metadataUri: string;
        masterEdition: boolean;
        isMutable: boolean;
        primarySaleHappened: boolean;
        sellerFeeBasisPoints: number;
        updateAuthority: string;
    };
}, {
    mint: SolAddress;
    standard: string;
    name: string;
    symbol: string;
    metaplex: {
        metadataUri: string;
        updateAuthority: SolAddress;
        sellerFeeBasisPoints: number;
        primarySaleHappened: boolean;
        isMutable: boolean;
        masterEdition: boolean;
    };
}, {
    mint: string;
    standard: string;
    name: string;
    symbol: string;
    metaplex: {
        metadataUri: string;
        updateAuthority: string;
        sellerFeeBasisPoints: number;
        primarySaleHappened: boolean;
        isMutable: boolean;
        masterEdition: boolean;
    };
}>;
export {};
//# sourceMappingURL=getNFTMetadata.d.ts.map