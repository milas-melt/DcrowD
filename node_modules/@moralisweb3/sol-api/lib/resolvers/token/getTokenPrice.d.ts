import { Camelize } from '@moralisweb3/core';
import { SolAddress, SolNetworkish, SolAddressish, SolNative } from '@moralisweb3/sol-utils';
import { operations } from '../../generated/types';
declare type Operation = 'getTokenPrice';
declare type PathParams = operations[Operation]['parameters']['path'];
declare type ApiParams = PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export declare const getTokenPrice: import("@moralisweb3/api-utils").EndpointFactory<{
    address: string;
    network: "mainnet" | "devnet";
}, Params, {
    nativePrice: {
        value: string;
        decimals: number;
        name: string;
        symbol: string;
    };
    usdPrice: number;
    exchangeAddress: string;
    exchangeName: string;
}, {
    nativePrice: {
        value: SolNative;
        decimals: number;
        name: string;
        symbol: string;
    };
    usdPrice: number;
    exchangeAddress: SolAddress;
    exchangeName: string;
}, {
    nativePrice: {
        value: string;
        decimals: number;
        name: string;
        symbol: string;
    };
    usdPrice: number;
    exchangeAddress: string;
    exchangeName: string;
}>;
export {};
//# sourceMappingURL=getTokenPrice.d.ts.map