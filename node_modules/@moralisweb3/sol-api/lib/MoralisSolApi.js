"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoralisSolApi = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var SolApiConfigSetup_1 = require("./config/SolApiConfigSetup");
var getBalance_1 = require("./resolvers/account/getBalance");
var getNFTs_1 = require("./resolvers/account/getNFTs");
var getPortfolio_1 = require("./resolvers/account/getPortfolio");
var getSPL_1 = require("./resolvers/account/getSPL");
var getNFTMetadata_1 = require("./resolvers/nft/getNFTMetadata");
var getTokenPrice_1 = require("./resolvers/token/getTokenPrice");
var BASE_URL = 'https://solana-gateway.moralis.io';
var MoralisSolApi = /** @class */ (function (_super) {
    __extends(MoralisSolApi, _super);
    function MoralisSolApi(core) {
        var _this = _super.call(this, MoralisSolApi.moduleName, core, BASE_URL) || this;
        _this.endpoints = new api_utils_1.Endpoints(_this.core, BASE_URL);
        _this.getBalance = _this.endpoints.createFetcher(getBalance_1.getBalance);
        _this.account = {
            getBalance: _this.getBalance,
            getNFTs: _this.endpoints.createFetcher(getNFTs_1.getNFTs),
            getPortfolio: _this.endpoints.createFetcher(getPortfolio_1.getPortfolio),
            getSPL: _this.endpoints.createFetcher(getSPL_1.getSPL),
            // Support for old naming
            /**
             * @deprecated Replaced by account.getBalance
             */
            balance: _this.getBalance,
        };
        _this.nft = {
            getNFTMetadata: _this.endpoints.createFetcher(getNFTMetadata_1.getNFTMetadata),
        };
        _this.token = {
            getTokenPrice: _this.endpoints.createFetcher(getTokenPrice_1.getTokenPrice),
        };
        return _this;
    }
    MoralisSolApi.create = function (core) {
        return new MoralisSolApi(core !== null && core !== void 0 ? core : core_1.MoralisCoreProvider.getDefault());
    };
    MoralisSolApi.prototype.setup = function () {
        SolApiConfigSetup_1.SolApiConfigSetup.register(this.core.config);
    };
    MoralisSolApi.prototype.start = function () {
        // Nothing
    };
    MoralisSolApi.moduleName = 'solApi';
    return MoralisSolApi;
}(core_1.ApiModule));
exports.MoralisSolApi = MoralisSolApi;
//# sourceMappingURL=MoralisSolApi.js.map