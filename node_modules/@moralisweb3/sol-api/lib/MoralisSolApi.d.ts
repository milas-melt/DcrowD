import { Endpoints } from '@moralisweb3/api-utils';
import { ApiModule, MoralisCore } from '@moralisweb3/core';
export declare class MoralisSolApi extends ApiModule {
    static readonly moduleName = "solApi";
    static create(core?: MoralisCore): MoralisSolApi;
    private constructor();
    setup(): void;
    start(): void;
    readonly endpoints: Endpoints;
    private readonly getBalance;
    readonly account: {
        getBalance: (params: import("./resolvers/account/getBalance").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            solana: string;
            lamports: string;
        }, import("@moralisweb3/sol-utils").SolNative, string, import("./resolvers/account/getBalance").Params>>;
        getNFTs: (params: import("./resolvers/account/getNFTs").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            associatedTokenAddress: string;
            mint: string;
        }[], {
            associatedTokenAddress: import("@moralisweb3/sol-utils").SolAddress;
            mint: import("@moralisweb3/sol-utils").SolAddress;
        }[], {
            associatedTokenAddress: string;
            mint: string;
        }[], import("./resolvers/account/getNFTs").Params>>;
        getPortfolio: (params: import("./resolvers/account/getPortfolio").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            nativeBalance: {
                solana: string;
                lamports: string;
            };
            nfts: {
                associatedTokenAddress: string;
                mint: string;
            }[];
            tokens: {
                associatedTokenAddress: string;
                mint: string;
                amount: string;
                amountRaw: string;
                decimals: number;
            }[];
        }, {
            nativeBalance: import("@moralisweb3/sol-utils").SolNative;
            nfts: {
                associatedTokenAddress: import("@moralisweb3/sol-utils").SolAddress;
                mint: import("@moralisweb3/sol-utils").SolAddress;
            }[];
            tokens: {
                associatedTokenAddress: import("@moralisweb3/sol-utils").SolAddress;
                mint: import("@moralisweb3/sol-utils").SolAddress;
                amount: import("@moralisweb3/sol-utils").SolNative;
            }[];
        }, {
            nativeBalance: string;
            nfts: {
                associatedTokenAddress: string;
                mint: string;
            }[];
            tokens: {
                associatedTokenAddress: string;
                mint: string;
                amount: string;
            }[];
        }, import("./resolvers/account/getPortfolio").Params>>;
        getSPL: (params: import("./resolvers/account/getSPL").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            associatedTokenAddress: string;
            mint: string;
            amount: string;
            amountRaw: string;
            decimals: number;
        }[], {
            associatedTokenAddress: import("@moralisweb3/sol-utils").SolAddress;
            mint: import("@moralisweb3/sol-utils").SolAddress;
            amount: import("@moralisweb3/sol-utils").SolNative;
        }[], {
            associatedTokenAddress: string;
            mint: string;
            amount: string;
        }[], import("./resolvers/account/getSPL").Params>>;
        /**
         * @deprecated Replaced by account.getBalance
         */
        balance: (params: import("./resolvers/account/getBalance").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            solana: string;
            lamports: string;
        }, import("@moralisweb3/sol-utils").SolNative, string, import("./resolvers/account/getBalance").Params>>;
    };
    readonly nft: {
        getNFTMetadata: (params: import("./resolvers/nft/getNFTMetadata").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            mint: string;
            standard: string;
            name: string;
            symbol: string;
            metaplex: {
                metadataUri: string;
                masterEdition: boolean;
                isMutable: boolean;
                primarySaleHappened: boolean;
                sellerFeeBasisPoints: number;
                updateAuthority: string;
            };
        }, {
            mint: import("@moralisweb3/sol-utils").SolAddress;
            standard: string;
            name: string;
            symbol: string;
            metaplex: {
                metadataUri: string;
                updateAuthority: import("@moralisweb3/sol-utils").SolAddress;
                sellerFeeBasisPoints: number;
                primarySaleHappened: boolean;
                isMutable: boolean;
                masterEdition: boolean;
            };
        }, {
            mint: string;
            standard: string;
            name: string;
            symbol: string;
            metaplex: {
                metadataUri: string;
                updateAuthority: string;
                sellerFeeBasisPoints: number;
                primarySaleHappened: boolean;
                isMutable: boolean;
                masterEdition: boolean;
            };
        }, import("./resolvers/nft/getNFTMetadata").Params>>;
    };
    readonly token: {
        getTokenPrice: (params: import("./resolvers/token/getTokenPrice").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            nativePrice: {
                value: string;
                decimals: number;
                name: string;
                symbol: string;
            };
            usdPrice: number;
            exchangeAddress: string;
            exchangeName: string;
        }, {
            nativePrice: {
                value: import("@moralisweb3/sol-utils").SolNative;
                decimals: number;
                /**
                 * @deprecated Replaced by account.getBalance
                 */
                name: string;
                symbol: string;
            };
            usdPrice: number;
            exchangeAddress: import("@moralisweb3/sol-utils").SolAddress;
            exchangeName: string;
        }, {
            nativePrice: {
                value: string;
                decimals: number;
                name: string;
                symbol: string;
            };
            usdPrice: number;
            exchangeAddress: string;
            exchangeName: string;
        }, import("./resolvers/token/getTokenPrice").Params>>;
    };
}
//# sourceMappingURL=MoralisSolApi.d.ts.map