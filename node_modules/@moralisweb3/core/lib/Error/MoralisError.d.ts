import { MoralisErrorCode, CoreErrorCode, ApiErrorCode, AuthErrorCode, StreamErrorCode } from './ErrorCode';
export declare type MoralisErrorDetails = Record<string, unknown>;
export interface MoralisErrorOptions<ErrorCode extends MoralisErrorCode> {
    message: string;
    code: ErrorCode;
    details?: MoralisErrorDetails;
    cause?: Error;
}
export declare class MoralisError extends Error {
    readonly name: string;
    readonly code: MoralisErrorCode;
    readonly details?: MoralisErrorDetails;
    readonly cause?: Error | MoralisError;
    readonly isMoralisError = true;
    private static makeMessage;
    constructor({ message, code, details, cause }: MoralisErrorOptions<MoralisErrorCode>);
}
export declare class MoralisCoreError extends MoralisError {
    readonly name: string;
    constructor(options: MoralisErrorOptions<CoreErrorCode>);
}
export declare class MoralisApiError extends MoralisError {
    readonly name: string;
    constructor(options: MoralisErrorOptions<ApiErrorCode>);
}
export declare class MoralisAuthError extends MoralisError {
    readonly name: string;
    constructor(options: MoralisErrorOptions<AuthErrorCode>);
}
export declare class MoralisStreamError extends MoralisError {
    readonly name: string;
    constructor(options: MoralisErrorOptions<StreamErrorCode>);
}
//# sourceMappingURL=MoralisError.d.ts.map