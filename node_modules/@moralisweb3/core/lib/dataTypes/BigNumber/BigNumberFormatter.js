"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigNumberFormatter = void 0;
var Error_1 = require("../../Error");
var BigNumberFormatter = /** @class */ (function () {
    function BigNumberFormatter() {
    }
    BigNumberFormatter.toDecimal = function (value, decimals) {
        if (decimals < 0) {
            throw new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.BIG_NUMBER_ERROR,
                message: 'Invalid decimals',
            });
        }
        var result = value.toString();
        if (decimals === 0) {
            return result;
        }
        var isNegative = result.startsWith('-');
        if (isNegative) {
            result = result.substring(1);
        }
        result = result.padStart(decimals, '0');
        var dot = result.length - decimals;
        var whole = dot === 0 ? '0' : result.substring(0, dot);
        var fraction = result.substring(dot);
        result = "".concat(whole, ".").concat(fraction);
        while (result[result.length - 1] === '0' && result[result.length - 2] !== '.') {
            result = result.substring(0, result.length - 1);
        }
        if (isNegative) {
            result = "-".concat(result);
        }
        return result;
    };
    BigNumberFormatter.toHex = function (value) {
        var result = value.toString(16);
        var isNegative = result.startsWith('-');
        if (isNegative) {
            result = result.substring(1);
        }
        if (result.length % 2 !== 0) {
            result = "0".concat(result);
        }
        result = "0x".concat(result);
        if (isNegative) {
            result = "-".concat(result);
        }
        return result;
    };
    return BigNumberFormatter;
}());
exports.BigNumberFormatter = BigNumberFormatter;
//# sourceMappingURL=BigNumberFormatter.js.map