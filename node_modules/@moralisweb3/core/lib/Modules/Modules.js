"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modules = void 0;
var utils_1 = require("./utils");
var Error_1 = require("../Error");
/**
 * MoralisModues handles all registered modules.
 * Any package that is used in Moralis, should register itself via this class.
 * This allows cross-communication between modules and easy management of the modules
 *
 * This class is responsible for:
 * - registering new modules
 * - removing modules (in theory possible for exotic usecases, but might break the app if done after initialisation)
 * - getting individual modules by name, type or everything
 */
var Modules = /** @class */ (function () {
    function Modules() {
        this.modules = new Map();
    }
    /**
     * Register and setup a new module by providing a module that is extended from BaseClass.
     * This will throw an error if the name is not unique
     * @param module the module that needs to be registered
     */
    Modules.prototype.register = function (module) {
        if (this.modules.has(module.name)) {
            throw new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.DUPLICATE_MODULE,
                message: "The module \"".concat(module.name, "\" has already been registered."),
            });
        }
        this.modules.set(module.name, module);
        module.setup();
    };
    /**
     * Returns the module with the given name.
     * This module should have been registered with `register`
     * @param name the module name
     * @returns a valid BaseModule
     * @throws a MoralisCoreError if no module with the given name has been registered
     */
    Modules.prototype.get = function (name) {
        var module = this.modules.get(name);
        if (!module) {
            throw new Error_1.MoralisCoreError({ code: Error_1.CoreErrorCode.MODULE_NOT_FOUND, message: "Module \"".concat(name, "\" does not exist.") });
        }
        return module;
    };
    /**
     * Tries to return the module with the given name if exist. Otherwise returns null.
     * @param name the module name
     * @returns a valid BaseModule or null
     */
    Modules.prototype.tryGet = function (name) {
        return this.modules.get(name) || null;
    };
    Modules.prototype.has = function (name) {
        return this.modules.has(name);
    };
    /**
     * Returns the network module with the provided name.
     * @param name the module name
     * @returns a valid ApiModule
     * @throws a MoralisCoreError if no network module with the given name has been registered
     */
    Modules.prototype.getApi = function (name) {
        var module = this.modules.get(name);
        if (!module || !(0, utils_1.isApiModule)(module)) {
            throw new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,
                message: "No ApiModule found with the name \"".concat(name, "\""),
            });
        }
        return module;
    };
    /**
     * Remove the module with the provided name, if it has been registered,
     * @param name the module name
     * @throws a MoralisCoreError if the module cannot be found.
     */
    Modules.prototype.remove = function (name) {
        var isRemoved = this.modules.delete(name);
        if (!isRemoved) {
            throw new Error_1.MoralisCoreError({ code: Error_1.CoreErrorCode.MODULE_NOT_FOUND, message: "Module \"".concat(name, "\" does not exist.") });
        }
    };
    /**
     * List all the registered modules
     * @returns an array of BaseModule that have been registered
     */
    Modules.prototype.list = function () {
        return Array.from(this.modules.values());
    };
    /**
     * Returns the names of all registered modules
     */
    Modules.prototype.listNames = function () {
        return this.list().map(function (module) { return module.name; });
    };
    /**
     * List all the registered api modules (eg. modules with the type CoreModuleType.API)
     */
    Modules.prototype.listApis = function () {
        return this.list().filter(utils_1.isApiModule);
    };
    return Modules;
}());
exports.Modules = Modules;
//# sourceMappingURL=Modules.js.map