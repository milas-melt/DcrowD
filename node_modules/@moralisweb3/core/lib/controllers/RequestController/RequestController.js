"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestController = void 0;
var Error_1 = require("../../Error");
var AxiosRetry_1 = require("../AxiosRetry");
var ApiRequestError_1 = require("./ApiRequestError");
/**
 * A controller responsible to handle all requests in Moralis,
 * compatible with browser, nodejJs and react-native
 */
var RequestController = /** @class */ (function () {
    function RequestController(logger) {
        this.logger = logger;
    }
    RequestController.create = function (core) {
        return new RequestController(core.logger);
    };
    RequestController.prototype.request = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var retryConfig, response, e_1, error;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose('[RequestController] request started', {
                            url: config.url,
                            method: config.method,
                            body: config.data,
                        });
                        retryConfig = {
                            maxAttempts: 2,
                            allowedMethods: ['GET', 'OPTIONS'],
                            allowedResponseStatuses: [408, 413, 429, 500, 502, 503, 504],
                            beforeRetry: function (attempt, error) {
                                _this.logger.verbose('[RequestController] request retry', {
                                    url: config.url,
                                    method: config.method,
                                    body: config.data,
                                    error: error,
                                    attempt: attempt,
                                });
                            },
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, AxiosRetry_1.AxiosRetry.request(retryConfig, __assign(__assign({}, config), { timeout: 10000 }))];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 3:
                        e_1 = _a.sent();
                        error = this.makeError(e_1);
                        this.logger.verbose('[RequestController] request error', {
                            url: config.url,
                            method: config.method,
                            body: config.data,
                            cause: error.cause,
                            name: error.name,
                            details: error.details,
                        });
                        throw error;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RequestController.prototype.makeError = function (error) {
        if ((0, ApiRequestError_1.isApiRequestError)(error)) {
            var _a = error.response, status = _a.status, statusText = _a.statusText;
            var apiMessage = (0, ApiRequestError_1.getMessageFromApiRequestError)(error);
            return new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.REQUEST_ERROR,
                message: "Request failed, ".concat(statusText, "(").concat(status, "): ").concat(apiMessage),
                cause: error,
                details: {
                    status: status,
                    response: error.response,
                },
            });
        }
        var err = error instanceof Error ? error : new Error("".concat(error));
        return new Error_1.MoralisCoreError({
            code: Error_1.CoreErrorCode.REQUEST_ERROR,
            message: "Request failed: ".concat(err.message),
            cause: err,
        });
    };
    RequestController.prototype.post = function (url, searchParams, body, options, abortSignal) {
        return this.request({
            url: url,
            params: searchParams,
            method: 'POST',
            data: body,
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal,
        });
    };
    RequestController.prototype.put = function (url, searchParams, body, options, abortSignal) {
        return this.request({
            url: url,
            params: searchParams,
            method: 'PUT',
            data: body,
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal,
        });
    };
    RequestController.prototype.get = function (url, searchParams, options, abortSignal) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request({
                        url: url,
                        params: searchParams,
                        method: 'GET',
                        headers: options === null || options === void 0 ? void 0 : options.headers,
                        signal: abortSignal,
                    })];
            });
        });
    };
    RequestController.prototype.delete = function (url, searchParams, body, options, abortSignal) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request({
                        url: url,
                        params: searchParams,
                        method: 'DELETE',
                        data: body,
                        headers: options === null || options === void 0 ? void 0 : options.headers,
                        signal: abortSignal,
                    })];
            });
        });
    };
    return RequestController;
}());
exports.RequestController = RequestController;
//# sourceMappingURL=RequestController.js.map