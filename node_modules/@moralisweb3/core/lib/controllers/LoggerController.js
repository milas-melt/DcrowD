"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerController = void 0;
/* eslint-disable no-console */
var isMoralisError_1 = require("../Error/isMoralisError");
var CoreConfig_1 = require("../Config/CoreConfig");
var logLevelMap = {
    verbose: 5,
    debug: 4,
    info: 3,
    warning: 2,
    error: 1,
    off: 0,
};
/**
 * LoggerController, responsible to create log messages for each module.
 * It should be created with the name of the module like `new Logger('module-name')`
 * It will then prefix any logs with that module-name for easy debugging
 * It will show only logs up to the specified `logLevel` in the MoralisConfig
 */
var LoggerController = /** @class */ (function () {
    function LoggerController(moduleName, config) {
        this.moduleName = moduleName;
        this.config = config;
    }
    LoggerController.create = function (moduleName, core) {
        return new LoggerController(moduleName, core.config);
    };
    Object.defineProperty(LoggerController.prototype, "level", {
        get: function () {
            return this.config.get(CoreConfig_1.CoreConfig.logLevel);
        },
        enumerable: false,
        configurable: true
    });
    LoggerController.prototype._transport = function (level, message, details) {
        var logMessage = this._makeLogMessage(message);
        var args = [logMessage, details].filter(function (arg) { return arg != null; });
        switch (level) {
            case 'error':
                console.error.apply(console, args);
                break;
            case 'warn':
                console.warn.apply(console, args);
                break;
            case 'log':
                console.log.apply(console, args);
                break;
        }
    };
    LoggerController.prototype._shouldLog = function (logLevel) {
        var level = logLevelMap[logLevel];
        var acceptedLevel = logLevelMap[this.level];
        if (level > acceptedLevel) {
            return false;
        }
        return true;
    };
    LoggerController.prototype._makeLogMessage = function (message) {
        return "Moralis[".concat(this.moduleName, "]: ").concat(message);
    };
    LoggerController.prototype.error = function (error, details) {
        if (!this._shouldLog('error')) {
            return;
        }
        var message = '';
        if (typeof error === 'string') {
            message = error;
        }
        else if ((0, isMoralisError_1.isMoralisError)(error)) {
            message = error.message;
            if (error.details) {
                if (details) {
                    details._errorDetails = error.details;
                }
                else {
                    details = {
                        _errorDetails: error.details,
                    };
                }
            }
        }
        else {
            message = error.message;
        }
        this._transport('error', message, details);
    };
    LoggerController.prototype.warn = function (message, details) {
        if (!this._shouldLog('warning')) {
            return;
        }
        this._transport('warn', message, details);
    };
    LoggerController.prototype.info = function (message, details) {
        if (!this._shouldLog('info')) {
            return;
        }
        this._transport('log', message, details);
    };
    LoggerController.prototype.debug = function (message, details) {
        if (!this._shouldLog('debug')) {
            return;
        }
        this._transport('log', message, details);
    };
    LoggerController.prototype.verbose = function (message, details) {
        if (!this._shouldLog('verbose')) {
            return;
        }
        this._transport('log', message, details);
    };
    return LoggerController;
}());
exports.LoggerController = LoggerController;
//# sourceMappingURL=LoggerController.js.map