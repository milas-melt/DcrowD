declare type CamelCase<Input extends string> = Input extends `${infer P1}_${infer P2}${infer P3}` ? `${P1}${Uppercase<P2>}${CamelCase<P3>}` : Input;
export declare type Camelize<Data> = {
    [Key in keyof Data as CamelCase<string & Key>]: Data[Key] extends Array<infer Value> ? Value extends {} ? Array<Camelize<Value>> : Data[Key] : Data[Key] extends {} ? Camelize<Data[Key]> : Data[Key];
};
export declare const toCamelCase: <Data extends object>(data: Data) => Camelize<Data>;
export {};
//# sourceMappingURL=toCamelCase.d.ts.map