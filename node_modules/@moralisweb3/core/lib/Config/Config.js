"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
var Error_1 = require("../Error");
var Config = /** @class */ (function () {
    function Config() {
        this.items = new Map();
    }
    Config.prototype.registerKey = function (key, validator) {
        if (this.items.has(key.name)) {
            throw new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.CONFIG_KEY_ALREADY_EXIST,
                message: "Key \"".concat(key.name, "\" is already registered"),
            });
        }
        this.items.set(key.name, { key: key, value: key.defaultValue, validator: validator });
    };
    Config.prototype.getKeys = function () {
        return Array.from(this.items.keys());
    };
    Config.prototype.hasKey = function (key) {
        return this.items.has(key.name);
    };
    Config.prototype.get = function (keyOrName) {
        return this.getItem(keyOrName).value;
    };
    Config.prototype.set = function (keyOrName, value) {
        var item = this.getItem(keyOrName);
        var error = item.validator ? item.validator(value) : null;
        if (error) {
            throw new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.CONFIG_INVALID_VALUE,
                message: "Cannot set this config. Invalid value for \"".concat(item.key.name, "\". ").concat(error),
            });
        }
        item.value = value;
    };
    Config.prototype.merge = function (values) {
        var _this = this;
        Object.keys(values).forEach(function (keyName) {
            _this.set(keyName, values[keyName]);
        });
    };
    Config.prototype.reset = function () {
        this.items.forEach(function (item) {
            item.value = item.key.defaultValue;
        });
    };
    Config.prototype.getItem = function (keyOrName) {
        var keyName = typeof keyOrName === 'string' ? keyOrName : keyOrName.name;
        var item = this.items.get(keyName);
        if (!item) {
            // This error occurs when a user tries to set a value for a specific key, but the key is not registered.
            // That situation may occur, when a moralis module is not registered (all keys are registered in the module setup step).
            // If you have this error, you should fix your code. Firstly, you should register all modules, later you can modify the configuration.
            throw new Error_1.MoralisCoreError({
                code: Error_1.CoreErrorCode.CONFIG_KEY_NOT_EXIST,
                message: "Key \"".concat(keyName, "\" is unregistered. Have you registered all required modules?"),
            });
        }
        return item;
    };
    return Config;
}());
exports.Config = Config;
//# sourceMappingURL=Config.js.map