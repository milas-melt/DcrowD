import { ApiResultAdapter } from './ApiResultAdapter';
import { PaginatedResult } from './PaginatedEndpoint';
/**
 * The adapter for a paginated API result.
 */
export declare class ApiPaginatedResultAdapter<Data extends PaginatedResult<unknown>, AdaptedData, JSONData, Params> extends ApiResultAdapter<Data, AdaptedData, JSONData, Params> {
    private readonly nextHandler?;
    constructor(data: Data, adapter: (data: Data, params: Params) => AdaptedData, jsonAdapter: (data: AdaptedData) => JSONData, params: Params, nextHandler?: (() => Promise<ApiPaginatedResultAdapter<Data, AdaptedData, JSONData, Params>>) | undefined);
    /**
     * Checks an existence of the next page.
     *
     * @returns `true` if a next page exists, otherwise `false`.
     */
    hasNext: () => boolean;
    /**
     * Gets a next page of the paginated result.
     *
     * @returns a new instance of a paginated adapter.
     */
    next: () => Promise<ApiPaginatedResultAdapter<Data, AdaptedData, JSONData, Params>>;
    /**
     * @returns an info about pagination.
     */
    get pagination(): {
        total: number;
        page: number;
        pageSize: number;
        cursor: string;
    };
}
//# sourceMappingURL=ApiPaginatedResultAdapter.d.ts.map