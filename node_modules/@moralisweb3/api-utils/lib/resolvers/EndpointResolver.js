"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointResolver = void 0;
var core_1 = require("@moralisweb3/core");
var ApiConfig_1 = require("../config/ApiConfig");
var isNotFoundError_1 = require("../errors/isNotFoundError");
var ApiResultAdapter_1 = require("./ApiResultAdapter");
var EndpointParamsReader_1 = require("./EndpointParamsReader");
var getCommonHeaders_1 = require("./getCommonHeaders");
var EndpointResolver = /** @class */ (function () {
    function EndpointResolver(endpoint, baseUrl, config, requestController, paramsReader) {
        var _this = this;
        this.endpoint = endpoint;
        this.baseUrl = baseUrl;
        this.config = config;
        this.requestController = requestController;
        this.paramsReader = paramsReader;
        // TODO: error handler to ApiError
        this.get = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var url, apiParams, searchParams, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.createUrl(params);
                        apiParams = this.endpoint.parseParams(params);
                        searchParams = this.paramsReader.getSearchParams(apiParams);
                        return [4 /*yield*/, this.requestController.get(url, searchParams, {
                                headers: this.createHeaders(),
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new ApiResultAdapter_1.ApiResultAdapter(result, this.endpoint.apiToResult, this.endpoint.resultToJson, params)];
                }
            });
        }); };
        this.post = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var url, apiParams, searchParams, bodyParams, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.createUrl(params);
                        apiParams = this.endpoint.parseParams(params);
                        searchParams = this.paramsReader.getSearchParams(apiParams);
                        bodyParams = this.paramsReader.getBodyParams(apiParams);
                        return [4 /*yield*/, this.requestController.post(url, searchParams, bodyParams, {
                                headers: this.createHeaders(),
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new ApiResultAdapter_1.ApiResultAdapter(result, this.endpoint.apiToResult, this.endpoint.resultToJson, params)];
                }
            });
        }); };
        this.put = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var url, apiParams, searchParams, bodyParams, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.createUrl(params);
                        apiParams = this.endpoint.parseParams(params);
                        searchParams = this.paramsReader.getSearchParams(apiParams);
                        bodyParams = this.paramsReader.getBodyParams(apiParams);
                        return [4 /*yield*/, this.requestController.put(url, searchParams, bodyParams, {
                                headers: this.createHeaders(),
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new ApiResultAdapter_1.ApiResultAdapter(result, this.endpoint.apiToResult, this.endpoint.resultToJson, params)];
                }
            });
        }); };
        this.delete = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var url, apiParams, searchParams, bodyParams, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.createUrl(params);
                        apiParams = this.endpoint.parseParams(params);
                        searchParams = this.paramsReader.getSearchParams(apiParams);
                        bodyParams = this.paramsReader.getBodyParams(apiParams);
                        return [4 /*yield*/, this.requestController.delete(url, searchParams, bodyParams, {
                                headers: this.createHeaders(),
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new ApiResultAdapter_1.ApiResultAdapter(result, this.endpoint.apiToResult, this.endpoint.resultToJson, params)];
                }
            });
        }); };
        this.fetch = function (params) {
            switch (_this.endpoint.method) {
                case 'post':
                    return _this.post(params);
                case 'put':
                    return _this.put(params);
                case 'delete':
                    return _this.delete(params);
                default:
                    return _this.get(params);
            }
        };
        this.fetchNullable = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.fetch(params)];
                    case 1:
                        result = _a.sent();
                        // TODO: this block should be deleted after the back-end adjustments.
                        if (!result.raw || (typeof result.raw === 'object' && Object.keys(result.raw).length === 0)) {
                            throw new core_1.MoralisApiError({
                                code: core_1.ApiErrorCode.NOT_FOUND,
                                message: 'The resource is not found',
                            });
                        }
                        return [2 /*return*/, result];
                    case 2:
                        e_1 = _a.sent();
                        if ((0, isNotFoundError_1.isNotFoundError)(e_1)) {
                            return [2 /*return*/, null];
                        }
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
    }
    EndpointResolver.create = function (core, baseUrl, endpointFactory) {
        var requestController = core_1.RequestController.create(core);
        var endpoint = endpointFactory(core);
        var paramsReader = new EndpointParamsReader_1.EndpointParamsReader(endpoint);
        return new EndpointResolver(endpoint, baseUrl, core.config, requestController, paramsReader);
    };
    EndpointResolver.prototype.createUrl = function (params) {
        return this.baseUrl + this.endpoint.getUrl(params);
    };
    EndpointResolver.prototype.createHeaders = function () {
        var apiKey = this.config.get(ApiConfig_1.ApiConfig.apiKey);
        if (!apiKey) {
            throw new core_1.MoralisApiError({
                code: core_1.ApiErrorCode.API_KEY_NOT_SET,
                message: 'apiKey is not set',
            });
        }
        var headers = (0, getCommonHeaders_1.getCommonHeaders)();
        if (apiKey) {
            headers['x-api-key'] = apiKey;
        }
        return headers;
    };
    return EndpointResolver;
}());
exports.EndpointResolver = EndpointResolver;
//# sourceMappingURL=EndpointResolver.js.map