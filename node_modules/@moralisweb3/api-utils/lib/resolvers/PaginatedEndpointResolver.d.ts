import { ApiPaginatedResultAdapter } from './ApiPaginatedResultAdapter';
import { MoralisCore, Config, RequestController } from '@moralisweb3/core';
import { PaginatedResult, PaginatedEndpoint, PaginatedEndpointFactory, PaginatedParams } from './PaginatedEndpoint';
import { EndpointParamsReader } from './EndpointParamsReader';
export declare class PaginatedEndpointResolver<ApiParams, Params extends PaginatedParams, ApiResult, AdaptedResult, JSONResult> {
    readonly endpoint: PaginatedEndpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
    private readonly baseUrl;
    private readonly config;
    private readonly requestController;
    private readonly paramsReader;
    static create<ApiParams, Params extends PaginatedParams, ApiResult, AdaptedResult, JSONResult>(core: MoralisCore, baseUrl: string, endpointFactory: PaginatedEndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): PaginatedEndpointResolver<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
    constructor(endpoint: PaginatedEndpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>, baseUrl: string, config: Config, requestController: RequestController, paramsReader: EndpointParamsReader<ApiParams, Params, PaginatedResult<ApiResult>, AdaptedResult, JSONResult>);
    private get;
    private post;
    private resolveNextCall;
    private createUrl;
    private createHeaders;
    fetch: (params: Params) => Promise<ApiPaginatedResultAdapter<Awaited<PaginatedResult<ApiResult>>, AdaptedResult, JSONResult, Params>>;
}
//# sourceMappingURL=PaginatedEndpointResolver.d.ts.map