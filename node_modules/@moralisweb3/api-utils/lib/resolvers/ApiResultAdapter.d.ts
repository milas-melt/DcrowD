import { MoralisData, MoralisDataObject } from '@moralisweb3/core';
export declare enum ApiFormatType {
    RAW = "raw",
    JSON = "JSON",
    NORMAL = "normal"
}
export declare type InputApiResult<Value extends object = object> = {
    [key in keyof Value]: string | boolean | number | null | undefined | InputApiResult;
} | InputApiResult[];
export declare type AdaptedApiResult<Value extends object = object> = {
    [key in keyof Value]: string | boolean | number | null | MoralisData | MoralisDataObject | AdaptedApiResult;
} | AdaptedApiResult[];
export declare type JSONApiResult<Value extends object = object> = {
    [key in keyof Value]: string | boolean | number | null | JSONApiResult;
} | JSONApiResult[];
/**
 * The adapter for the API result.
 */
export declare class ApiResultAdapter<Data, AdaptedData, JSONData, Params> {
    protected readonly data: Data;
    protected readonly adapter: (data: Data, params: Params) => AdaptedData;
    protected readonly jsonAdapter: (data: AdaptedData) => JSONData;
    protected readonly params: Params;
    constructor(data: Data, adapter: (data: Data, params: Params) => AdaptedData, jsonAdapter: (data: AdaptedData) => JSONData, params: Params);
    /**
     * @returns a raw data from the API.
     */
    get raw(): Data;
    /**
     * @returns the result adapted into SDK types.
     */
    get result(): AdaptedData;
    /**
     * @returns the result in the JSON format.
     */
    toJSON(): JSONData;
    /**
     * @returns the result in the raw format.
     */
    format(formatType: ApiFormatType.RAW): Data;
    /**
     * @returns athe result in the JSON format.
     */
    format(formatType: ApiFormatType.JSON): unknown;
    /**
     * @returns the result adapted into SDK types.
     */
    format(formatType: ApiFormatType.NORMAL): AdaptedData;
}
//# sourceMappingURL=ApiResultAdapter.d.ts.map