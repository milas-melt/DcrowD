"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ApiConfig_1 = require("../config/ApiConfig");
var ApiResultAdapter_1 = require("./ApiResultAdapter");
var axios_1 = __importDefault(require("axios"));
var EndpointResolver_1 = require("./EndpointResolver");
var setup_1 = require("../test/setup");
var core_1 = require("@moralisweb3/core");
var Endpoint_1 = require("./Endpoint");
var MOCK_API_KEY = 'test-api-key';
var API_ROOT = 'https://deep-index.moralis.io/api/v2';
var endpointWeightsRawResult = {
    endpoint: 'getBlock',
    weight: '8',
};
var endpointWeightsTransformedResult = {
    endpoint: 'getBlock',
    weight: 8,
};
describe('ApiResolver', function () {
    var core;
    var resolver;
    var mockRequest;
    beforeAll(function () {
        core = (0, setup_1.setupApi)();
        core.config.set(ApiConfig_1.ApiConfig.apiKey, MOCK_API_KEY);
        mockRequest = jest.spyOn(axios_1.default, 'request');
        mockRequest.mockImplementation(function (options) {
            if (options.url === "".concat(API_ROOT, "/info/endpointWeights") && options.method === 'GET') {
                return Promise.resolve({
                    data: endpointWeightsRawResult,
                });
            }
            else {
                return Promise.reject('Invalid url');
            }
        });
    });
    beforeEach(function () {
        resolver = EndpointResolver_1.EndpointResolver.create(core, API_ROOT, (0, Endpoint_1.createEndpointFactory)(function () {
            return (0, Endpoint_1.createEndpoint)({
                name: 'endpointWeights',
                getUrl: function () { return '/info/endpointWeights'; },
                apiToResult: function (data) { return ({
                    endpoint: data.endpoint,
                    weight: parseInt(data.weight),
                }); },
                resultToJson: function (data) { return ({
                    endpoint: data.endpoint,
                    weight: data.weight.toString(),
                }); },
                parseParams: function (params) { return params; },
            });
        }));
        jest.clearAllMocks();
    });
    it('should test api resolver functions with get request', function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, resolver.fetch({})];
                case 1:
                    response = _a.sent();
                    expect(response.raw).toStrictEqual(endpointWeightsRawResult);
                    expect(response.toJSON()).toStrictEqual(endpointWeightsRawResult);
                    expect(response.result).toStrictEqual(endpointWeightsTransformedResult);
                    expect(response.format(ApiResultAdapter_1.ApiFormatType.NORMAL)).toStrictEqual(endpointWeightsTransformedResult);
                    expect(response.format(ApiResultAdapter_1.ApiFormatType.RAW)).toStrictEqual(endpointWeightsRawResult);
                    expect(function () { return response.format('legacy'); }).toThrowErrorMatchingInlineSnapshot("\"[A0001] provided formatType not supported\"");
                    return [2 /*return*/];
            }
        });
    }); });
    it('should set required api headers correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, resolver.fetch({})];
                case 1:
                    response = _a.sent();
                    expect(mockRequest).toHaveBeenCalledWith(expect.objectContaining({
                        headers: expect.objectContaining({
                            'x-api-key': MOCK_API_KEY,
                            'x-moralis-build-target': expect.any(String),
                            'x-moralis-platform': expect.any(String),
                            'x-moralis-platform-version': core_1.MoralisCore.libVersion,
                        }),
                    }));
                    expect(response).toBeDefined();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=EndpointResolver.test.js.map