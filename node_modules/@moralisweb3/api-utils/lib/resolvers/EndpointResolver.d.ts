import { MoralisCore, Config, RequestController } from '@moralisweb3/core';
import { ApiResultAdapter } from './ApiResultAdapter';
import { Endpoint, EndpointFactory } from './Endpoint';
import { EndpointParamsReader } from './EndpointParamsReader';
export declare class EndpointResolver<ApiParams, Params, ApiResult, AdaptedResult, JSONResult> {
    readonly endpoint: Endpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
    private readonly baseUrl;
    private readonly config;
    private readonly requestController;
    private readonly paramsReader;
    static create<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>(core: MoralisCore, baseUrl: string, endpointFactory: EndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): EndpointResolver<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
    constructor(endpoint: Endpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>, baseUrl: string, config: Config, requestController: RequestController, paramsReader: EndpointParamsReader<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>);
    private get;
    private post;
    private put;
    private delete;
    private createUrl;
    private createHeaders;
    fetch: (params: Params) => Promise<ApiResultAdapter<Awaited<ApiResult>, AdaptedResult, JSONResult, Params>>;
    fetchNullable: (params: Params) => Promise<ApiResultAdapter<Awaited<ApiResult>, AdaptedResult, JSONResult, Params> | null>;
}
//# sourceMappingURL=EndpointResolver.d.ts.map