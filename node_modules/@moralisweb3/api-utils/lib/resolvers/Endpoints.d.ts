import MoralisCore from '@moralisweb3/core';
import { EndpointFactory, EndpointMethod } from './Endpoint';
import { PaginatedEndpointFactory, PaginatedParams } from './PaginatedEndpoint';
export interface EndpointDescriptor {
    name: string;
    urlPatternParamNames: string[];
    urlPattern: string;
    bodyParamNames: string[];
    method: EndpointMethod;
}
export declare class Endpoints {
    private readonly core;
    private readonly baseUrl;
    private readonly endpoints;
    constructor(core: MoralisCore, baseUrl: string);
    createFetcher<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>(factory: EndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): (params: Params) => Promise<import("./ApiResultAdapter").ApiResultAdapter<Awaited<ApiResult>, AdaptedResult, JSONResult, Params>>;
    createNullableFetcher<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>(factory: EndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): (params: Params) => Promise<import("./ApiResultAdapter").ApiResultAdapter<Awaited<ApiResult>, AdaptedResult, JSONResult, Params> | null>;
    createPaginatedFetcher<ApiParams, Params extends PaginatedParams, ApiResult, AdaptedResult, JSONResult>(factory: PaginatedEndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): (params: Params) => Promise<import("./ApiPaginatedResultAdapter").ApiPaginatedResultAdapter<import("./PaginatedEndpoint").PaginatedResult<ApiResult>, AdaptedResult, JSONResult, Params>>;
    getDescriptors(): EndpointDescriptor[];
}
//# sourceMappingURL=Endpoints.d.ts.map