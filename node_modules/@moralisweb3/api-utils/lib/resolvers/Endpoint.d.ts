import { MoralisCore } from '@moralisweb3/core';
export declare type EndpointMethod = 'get' | 'post' | 'put' | 'delete';
export declare enum EndpointBodyType {
    PROPERTY = "property",
    BODY = "body"
}
export interface Endpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult> {
    name: string;
    getUrl: (params: Params) => string;
    apiToResult: (result: ApiResult, params: Params) => AdaptedResult;
    resultToJson: (result: AdaptedResult) => JSONResult;
    parseParams: (params: Params) => ApiParams;
    method?: EndpointMethod;
    urlParams?: readonly (keyof Params)[];
    bodyParams?: readonly (keyof ApiParams)[];
    bodyType?: EndpointBodyType;
    firstPageIndex?: number;
}
export declare type EndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult> = (core: MoralisCore) => Endpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
export declare function createEndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>(factory: EndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): EndpointFactory<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
export declare function createEndpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>(endpoint: Endpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>): Endpoint<ApiParams, Params, ApiResult, AdaptedResult, JSONResult>;
//# sourceMappingURL=Endpoint.d.ts.map