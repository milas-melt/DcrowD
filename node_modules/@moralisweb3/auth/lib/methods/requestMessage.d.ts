import { SolAddressish, SolNetworkish } from '@moralisweb3/sol-utils';
import MoralisCore from '@moralisweb3/core';
import { EvmAddressish, EvmChainish } from '@moralisweb3/evm-utils';
export interface RequestMessageEvmOptions {
    networkType?: 'evm';
    /**
     * @deprecared use networkType instead
     */
    network?: 'evm';
    domain: string;
    chain: EvmChainish;
    address: EvmAddressish;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
export interface RequestMessageSolOptions {
    networkType: 'solana';
    /**
     * @deprecared use networkType instead
     */
    network?: 'solana';
    domain: string;
    solNetwork: SolNetworkish;
    address: SolAddressish;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
export declare type RequestMessageOptions = RequestMessageEvmOptions | RequestMessageSolOptions;
export declare const makeRequestMessage: (core: MoralisCore) => (options: RequestMessageOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}, {
    domain: string;
    chainId: "1" | "3" | "4" | "5" | "25" | "42" | "56" | "97" | "137" | "250" | "338" | "1337" | "43113" | "43114" | "80001";
    address: string;
    statement?: string | undefined;
    uri: string;
    expirationTime?: string | undefined;
    notBefore?: string | undefined;
    resources?: string[] | undefined;
    timeout: number;
}> | import("@moralisweb3/api-utils").ApiResultAdapter<{
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}, {
    domain: string;
    network: "mainnet" | "testnet" | "devnet";
    address: string;
    statement?: string | undefined;
    uri: string;
    expirationTime?: string | undefined;
    notBefore?: string | undefined;
    resources?: string[] | undefined;
    timeout: number;
}>>;
//# sourceMappingURL=requestMessage.d.ts.map