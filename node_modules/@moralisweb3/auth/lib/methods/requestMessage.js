"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRequestMessage = void 0;
var sol_utils_1 = require("@moralisweb3/sol-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var MoralisAuth_1 = require("../MoralisAuth");
var resolvers_1 = require("../resolvers");
var AuthNetworkType_1 = require("../utils/AuthNetworkType");
var makeEvmRequestMessage = function (core, _a) {
    var chain = _a.chain, address = _a.address, networkType = _a.networkType, network = _a.network, options = __rest(_a, ["chain", "address", "networkType", "network"]);
    return api_utils_1.EndpointResolver.create(core, MoralisAuth_1.BASE_URL, resolvers_1.initializeChallengeEvm).fetch(__assign({ chainId: evm_utils_1.EvmChain.create(chain).apiId, address: evm_utils_1.EvmAddress.create(address).checksum }, options));
};
var makeSolRequestMessage = function (core, _a) {
    var address = _a.address, solNetwork = _a.solNetwork, networkType = _a.networkType, network = _a.network, options = __rest(_a, ["address", "solNetwork", "networkType", "network"]);
    return api_utils_1.EndpointResolver.create(core, MoralisAuth_1.BASE_URL, resolvers_1.initializeChallengeSol).fetch(__assign({ network: sol_utils_1.SolNetwork.create(solNetwork).network, address: sol_utils_1.SolAddress.create(address).toString() }, options));
};
var makeRequestMessage = function (core) { return function (options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        // Backwards compatibility for the 'network' parameter
        if (!options.networkType && options.network) {
            options.networkType = options.network;
        }
        switch (options.networkType) {
            case AuthNetworkType_1.AuthNetworkType.EVM:
                return [2 /*return*/, makeEvmRequestMessage(core, options)];
            case AuthNetworkType_1.AuthNetworkType.SOLANA:
                return [2 /*return*/, makeSolRequestMessage(core, options)];
            default:
                if (!options.networkType) {
                    return [2 /*return*/, makeEvmRequestMessage(core, options)];
                }
                throw new core_1.MoralisAuthError({
                    code: core_1.AuthErrorCode.INCORRECT_NETWORK,
                    message: "Incorrect network provided. Got \"".concat(options.networkType, "\", Valid values are: ").concat(Object.values(AuthNetworkType_1.AuthNetworkType)
                        .map(function (value) { return "\"".concat(value, "\""); })
                        .join(', ')),
                });
        }
        return [2 /*return*/];
    });
}); }; };
exports.makeRequestMessage = makeRequestMessage;
//# sourceMappingURL=requestMessage.js.map