import { ApiModule, MoralisCore } from '@moralisweb3/core';
import { RequestMessageOptions } from './methods/requestMessage';
import { VerifyEvmData, VerifyEvmOptions, VerifySolData, VerifySolOptions } from './methods/verify';
export declare const BASE_URL = "https://authapi.moralis.io";
export declare class MoralisAuth extends ApiModule {
    static readonly moduleName = "auth";
    static create(core?: MoralisCore): MoralisAuth;
    private constructor();
    setup(): void;
    start(): void;
    requestMessage: (options: RequestMessageOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        id: string;
        message: string;
        profileId: string;
    }, {
        id: string;
        message: string;
        profileId: string;
    }, {
        id: string;
        message: string;
        profileId: string;
    }, {
        domain: string;
        chainId: "1" | "3" | "4" | "5" | "25" | "42" | "56" | "97" | "137" | "250" | "338" | "1337" | "43113" | "43114" | "80001";
        address: string;
        statement?: string | undefined;
        uri: string;
        expirationTime?: string | undefined;
        notBefore?: string | undefined;
        resources?: string[] | undefined;
        timeout: number;
    }> | import("@moralisweb3/api-utils").ApiResultAdapter<{
        id: string;
        message: string;
        profileId: string;
    }, {
        id: string;
        message: string;
        profileId: string;
    }, {
        id: string;
        message: string;
        profileId: string;
    }, {
        domain: string;
        network: "mainnet" | "testnet" | "devnet";
        address: string;
        statement?: string | undefined;
        uri: string;
        expirationTime?: string | undefined;
        notBefore?: string | undefined;
        resources?: string[] | undefined;
        timeout: number;
    }>>;
    verify(options: VerifyEvmOptions): VerifyEvmData;
    verify(options: VerifySolOptions): VerifySolData;
}
//# sourceMappingURL=MoralisAuth.d.ts.map