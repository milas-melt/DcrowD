"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.completeChallengeEvm = void 0;
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
var name = 'verifyChallengeEvm';
var method = 'post';
var bodyParams = ['message', 'signature'];
exports.completeChallengeEvm = (0, api_utils_1.createEndpointFactory)(function () {
    return (0, api_utils_1.createEndpoint)({
        name: 'Verify Challenge (EVM)',
        getUrl: function () { return "/challenge/verify/evm"; },
        apiToResult: function (_a) {
            var chainId = _a.chainId, data = __rest(_a, ["chainId"]);
            return (__assign(__assign({}, data), { 
                // TODO: revisit EVM logic once we know how authentication in other networks work
                chain: evm_utils_1.EvmChain.create(chainId), address: evm_utils_1.EvmAddress.create(data.address), expirationTime: (0, core_1.maybe)(data.expirationTime, function (value) { return new Date(value); }) }));
        },
        resultToJson: function (result) { return (__assign(__assign({}, (0, core_1.toCamelCase)(result)), { chain: result.chain.format(), address: result.address.format() })); },
        parseParams: function (params) { return params; },
        method: method,
        bodyParams: bodyParams,
    });
});
//# sourceMappingURL=evmVerifyChallenge.js.map