export interface AnyWebhookLog {
    streamId: string;
    tag: string;
    streamType: string;
}
export interface ContractLog extends AnyWebhookLog {
    data: string;
    topic0: string | null;
    topic1: string | null;
    topic2: string | null;
    topic3: string | null;
}
export interface AnyAbi {
    inputs: AbiInput[];
    anonymous?: boolean;
}
interface AbiInput {
    indexed: boolean;
    name: string;
    type: string;
}
export interface AnyWebhookData {
    logs: AnyWebhookLog[];
    abis?: Record<string, AnyAbi>;
    chainId: string;
}
export interface ContractWebhookData extends AnyWebhookData {
    abis: Record<string, AnyAbi>;
}
export declare const isContractLog: <Log extends AnyWebhookLog>(log: Log, webhookData: AnyWebhookData) => boolean;
export declare const hasAbis: (webhookData: AnyWebhookData | ContractWebhookData) => webhookData is ContractWebhookData;
export declare const getTagStream: (webhookData: AnyWebhookData | ContractWebhookData, tag: string) => string | undefined;
export declare const getTagLogs: (webhookData: AnyWebhookData | ContractWebhookData, tag: string) => AnyWebhookLog[];
export declare const isWebhook: (webhookData: unknown) => webhookData is AnyWebhookData;
export declare const isNotEmpty: <Value>(value: Value | null) => value is Value;
export {};
//# sourceMappingURL=logDecoderUtils.d.ts.map