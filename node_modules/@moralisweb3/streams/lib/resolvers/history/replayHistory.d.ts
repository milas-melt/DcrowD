import { operations } from '../../generated/types';
declare const name = "ReplayHistory";
declare type Name = typeof name;
declare type PathParams = operations[Name]['parameters']['path'];
declare type ApiParams = PathParams;
export declare type ReplayHistoryParams = ApiParams;
export declare const replayHistory: import("@moralisweb3/api-utils").EndpointFactory<{
    streamId: string;
    id: string;
}, {
    streamId: string;
    id: string;
}, {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}, {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}, {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}>;
export {};
//# sourceMappingURL=replayHistory.d.ts.map