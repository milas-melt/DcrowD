"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetStreamById = void 0;
var resolvers_1 = require("../resolvers");
var StreamNetwork_1 = require("../utils/StreamNetwork");
var IncorrectNetworkError_1 = require("../utils/IncorrectNetworkError");
var makeGetStreamById = function (endpoints) {
    var evmFetcher = endpoints.createFetcher(resolvers_1.getStreamEvm);
    return function (_a) {
        var network = _a.network, options = __rest(_a, ["network"]);
        switch (network) {
            case StreamNetwork_1.StreamNetwork.EVM:
                return evmFetcher(__assign({}, options));
            default:
                throw new IncorrectNetworkError_1.IncorrectNetworkError(network);
        }
    };
};
exports.makeGetStreamById = makeGetStreamById;
//# sourceMappingURL=getById.js.map