"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmNftTrade = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
var EvmNative_1 = require("../EvmNative");
/**
 * The EvmNftTrade is a representation of a published trade.
 *
 * Use this class any time you work with a transaction.
 *
 * @category DataType
 */
var EvmNftTrade = /** @class */ (function () {
    function EvmNftTrade(data) {
        this._data = EvmNftTrade.parse(data);
    }
    /**
     * Create a new instance of EvmNftTrade from any valid transaction input
     * @param data - the EvmNftTradeish type
     * @example
     * ```
     * const trade = EvmNftTrade.create(data);
     *```
     */
    EvmNftTrade.create = function (data) {
        if (data instanceof EvmNftTrade) {
            return data;
        }
        return new EvmNftTrade(data);
    };
    /**
     * Check the equality between two Evm trades. It compares the `chain`, `blockNumber`, `transactionIndex` and `transactionHash`
     * @param dataA - The first trade
     * @param dataB - The second trade
     * @example
     * ```ts
     * EvmNftTrade.equals(dataA, dataB)
     * ```
     * @returns true if the trades are equal, false otherwise
     */
    EvmNftTrade.equals = function (dataA, dataB) {
        var transactionA = EvmNftTrade.create(dataA);
        var transactionB = EvmNftTrade.create(dataB);
        if (!transactionA._data.chain.equals(transactionB._data.chain)) {
            return false;
        }
        if (!transactionA._data.blockNumber.equals(transactionB._data.blockNumber)) {
            return false;
        }
        if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {
            return false;
        }
        if (transactionA._data.transactionIndex !== transactionB._data.transactionIndex) {
            return false;
        }
        return true;
    };
    /**
     * Checks the equality of the current trade instance with another evm trade
     * @param data - the trade to compare with
     * @example
     * ```ts
     * trade.equals(data)
     * ```
     * @returns true if the trades are equal, false otherwise
     */
    EvmNftTrade.prototype.equals = function (data) {
        return EvmNftTrade.equals(this, data);
    };
    /**
     * @returns a JSON represention of the trade.
     * @example
     * ```
     * trade.toJSON()
     * ```
     */
    EvmNftTrade.prototype.toJSON = function () {
        var data = this._data;
        return __assign(__assign({}, data), { chain: data.chain.format(), sellerAddress: data.sellerAddress.format(), buyerAddress: data.buyerAddress.format(), marketplaceAddress: data.marketplaceAddress.format(), tokenAddress: data.tokenAddress.format(), priceTokenAddress: data.priceTokenAddress ? data.priceTokenAddress.format() : undefined, blockNumber: data.blockNumber.toString(), price: data.price.toString(), blockTimestamp: data.blockTimestamp.toString() });
    };
    /**
     * @returns a JSON represention of the trade.
     * @example
     * ```
     * trade.format()
     * ```
     */
    EvmNftTrade.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmNftTrade.prototype, "result", {
        /**
         * @returns all the data without casting it to JSON.
         * @example trade.result
         */
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "sellerAddress", {
        /**
         * @returns the trade seller address
         * @example trade.sellerAddress // EvmAddress
         */
        get: function () {
            return this._data.sellerAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "buyerAddress", {
        /**
         * @returns the trade buyer address
         * @example trade.buyerAddress // EvmAddress
         */
        get: function () {
            return this._data.buyerAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "marketplaceAddress", {
        /**
         * @returns the trade marketplace address
         * @example trade.marketplaceAddress // EvmAddress
         */
        get: function () {
            return this._data.marketplaceAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "tokenAddress", {
        /**
         * @returns the trade token address
         * @example trade.tokenAddress // EvmAddress
         */
        get: function () {
            return this._data.tokenAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "priceTokenAddress", {
        /**
         * @returns the trade price token address
         * @example trade.priceTokenAddress // EvmAddress
         */
        get: function () {
            return this._data.priceTokenAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "price", {
        /**
         * @returns the trade price
         * @example trade.price // EvmNative
         */
        get: function () {
            return this._data.price;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "blockNumber", {
        /**
         * @returns the trade block number
         * @example trade.blockNumber // BigNumber
         */
        get: function () {
            return this._data.blockNumber;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "transactionIndex", {
        /**
         * @returns the trade transaction index
         * @example trade.transactionIndex // 164
         */
        get: function () {
            return this._data.transactionIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "transactionHash", {
        /**
         * @returns the trade transaction hash
         * @example trade.transactionHash // "0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e"
         */
        get: function () {
            return this._data.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "chain", {
        /**
         * @returns the trade chain
         * @example trade.chain // EvmChain
         */
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "tokenIds", {
        /**
         * @returns the trade token Ids
         * @example trade.tokenIds // ["16404"]
         */
        get: function () {
            return this._data.tokenIds;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "blockHash", {
        /**
         * @returns the trade block hash
         * @example trade.blockHash // "0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e"
         */
        get: function () {
            return this._data.blockHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNftTrade.prototype, "blockTimestamp", {
        /**
         * @returns the trade block timestamp
         * @example trade.blockTimestamp // Date
         */
        get: function () {
            return this._data.blockTimestamp;
        },
        enumerable: false,
        configurable: true
    });
    EvmNftTrade.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), sellerAddress: EvmAddress_1.EvmAddress.create(data.sellerAddress), buyerAddress: EvmAddress_1.EvmAddress.create(data.buyerAddress), marketplaceAddress: EvmAddress_1.EvmAddress.create(data.marketplaceAddress), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress), priceTokenAddress: (0, core_1.maybe)(data.priceTokenAddress, EvmAddress_1.EvmAddress.create), blockNumber: core_1.BigNumber.create(data.blockNumber), price: EvmNative_1.EvmNative.create(data.price), transactionIndex: +data.transactionIndex, blockTimestamp: (0, core_1.dateInputToDate)(data.blockTimestamp) })); };
    return EvmNftTrade;
}());
exports.EvmNftTrade = EvmNftTrade;
//# sourceMappingURL=EvmNftTrade.js.map