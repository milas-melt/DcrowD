import { MoralisDataObject, BigNumber } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { EvmNative } from '../EvmNative';
import { EvmNftTradeInput, EvmNftTradeData } from './types';
/**
 * Valid input for a new EvmNftTrade instance.
 * This can be an existing {@link EvmNftTrade} or a valid {@link EvmNftTradeInput} object
 */
export declare type EvmNftTradeish = EvmNftTradeInput | EvmNftTrade;
/**
 * The EvmNftTrade is a representation of a published trade.
 *
 * Use this class any time you work with a transaction.
 *
 * @category DataType
 */
export declare class EvmNftTrade implements MoralisDataObject {
    /**
     * Create a new instance of EvmNftTrade from any valid transaction input
     * @param data - the EvmNftTradeish type
     * @example
     * ```
     * const trade = EvmNftTrade.create(data);
     *```
     */
    static create(data: EvmNftTradeish): EvmNftTrade;
    private _data;
    constructor(data: EvmNftTradeInput);
    static parse: (data: EvmNftTradeInput) => EvmNftTradeData;
    /**
     * Check the equality between two Evm trades. It compares the `chain`, `blockNumber`, `transactionIndex` and `transactionHash`
     * @param dataA - The first trade
     * @param dataB - The second trade
     * @example
     * ```ts
     * EvmNftTrade.equals(dataA, dataB)
     * ```
     * @returns true if the trades are equal, false otherwise
     */
    static equals(dataA: EvmNftTradeish, dataB: EvmNftTradeish): boolean;
    /**
     * Checks the equality of the current trade instance with another evm trade
     * @param data - the trade to compare with
     * @example
     * ```ts
     * trade.equals(data)
     * ```
     * @returns true if the trades are equal, false otherwise
     */
    equals(data: EvmNftTradeish): boolean;
    /**
     * @returns a JSON represention of the trade.
     * @example
     * ```
     * trade.toJSON()
     * ```
     */
    toJSON(): {
        chain: string | number;
        sellerAddress: string;
        buyerAddress: string;
        marketplaceAddress: string;
        tokenAddress: string;
        priceTokenAddress: string | undefined;
        blockNumber: string;
        price: string;
        blockTimestamp: string;
        transactionHash: string;
        transactionIndex: number;
        tokenIds: string[];
        blockHash: string;
    };
    /**
     * @returns a JSON represention of the trade.
     * @example
     * ```
     * trade.format()
     * ```
     */
    format(): {
        chain: string | number;
        sellerAddress: string;
        buyerAddress: string;
        marketplaceAddress: string;
        tokenAddress: string;
        priceTokenAddress: string | undefined;
        blockNumber: string;
        price: string;
        blockTimestamp: string;
        transactionHash: string;
        transactionIndex: number;
        tokenIds: string[];
        blockHash: string;
    };
    /**
     * @returns all the data without casting it to JSON.
     * @example trade.result
     */
    get result(): EvmNftTradeData;
    /**
     * @returns the trade seller address
     * @example trade.sellerAddress // EvmAddress
     */
    get sellerAddress(): EvmAddress;
    /**
     * @returns the trade buyer address
     * @example trade.buyerAddress // EvmAddress
     */
    get buyerAddress(): EvmAddress;
    /**
     * @returns the trade marketplace address
     * @example trade.marketplaceAddress // EvmAddress
     */
    get marketplaceAddress(): EvmAddress;
    /**
     * @returns the trade token address
     * @example trade.tokenAddress // EvmAddress
     */
    get tokenAddress(): EvmAddress;
    /**
     * @returns the trade price token address
     * @example trade.priceTokenAddress // EvmAddress
     */
    get priceTokenAddress(): EvmAddress | undefined;
    /**
     * @returns the trade price
     * @example trade.price // EvmNative
     */
    get price(): EvmNative;
    /**
     * @returns the trade block number
     * @example trade.blockNumber // BigNumber
     */
    get blockNumber(): BigNumber;
    /**
     * @returns the trade transaction index
     * @example trade.transactionIndex // 164
     */
    get transactionIndex(): number;
    /**
     * @returns the trade transaction hash
     * @example trade.transactionHash // "0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e"
     */
    get transactionHash(): string;
    /**
     * @returns the trade chain
     * @example trade.chain // EvmChain
     */
    get chain(): EvmChain;
    /**
     * @returns the trade token Ids
     * @example trade.tokenIds // ["16404"]
     */
    get tokenIds(): string[];
    /**
     * @returns the trade block hash
     * @example trade.blockHash // "0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e"
     */
    get blockHash(): string;
    /**
     * @returns the trade block timestamp
     * @example trade.blockTimestamp // Date
     */
    get blockTimestamp(): Date;
}
//# sourceMappingURL=EvmNftTrade.d.ts.map