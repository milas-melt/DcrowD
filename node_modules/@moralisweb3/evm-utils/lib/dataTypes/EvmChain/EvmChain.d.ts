import { EvmChainish } from './EvmChainish';
import { EvmChainIdFormat, MoralisData, MoralisCore, EvmChainable } from '@moralisweb3/core';
/**
 * The EvmChain class is a MoralisData that references to a EVM chain
 * @category DataType
 */
export declare class EvmChain implements MoralisData, EvmChainable {
    private readonly config;
    /**
     * Returns ETHEREUM chain
     *
     * @example EvmChain.ETHEREUM
     */
    static get ETHEREUM(): EvmChain;
    /**
     * Returns ROPSTEN chain
     *
     * @example EvmChain.ROPSTEN
     * @deprecated see https://ethereum.org/en/developers/docs/networks/
     */
    static get ROPSTEN(): EvmChain;
    /**
     * Returns RINKEBY chain
     *
     * @example EvmChain.RINKEBY
     * @deprecated see https://ethereum.org/en/developers/docs/networks/
     */
    static get RINKEBY(): EvmChain;
    /**
     * Returns GOERLI chain
     *
     * @example EvmChain.GOERLI
     */
    static get GOERLI(): EvmChain;
    /**
     * Returns KOVAN chain
     *
     * @example EvmChain.KOVAN
     * @deprecated see https://ethereum.org/en/developers/docs/networks/
     */
    static get KOVAN(): EvmChain;
    static get SEPOLIA(): EvmChain;
    /**
     * Returns POLYGON chain
     *
     * @example EvmChain.POLYGON
     */
    static get POLYGON(): EvmChain;
    /**
     * Returns MUMBAI chain
     *
     * @example EvmChain.MUMBAI
     */
    static get MUMBAI(): EvmChain;
    /**
     * Returns BSC chain
     *
     * @example EvmChain.BSC
     */
    static get BSC(): EvmChain;
    /**
     * Returns BSC_TESTNET chain
     *
     * @example EvmChain.BSC_TESTNET
     */
    static get BSC_TESTNET(): EvmChain;
    /**
     * Returns AVALANCHE chain
     *
     * @example EvmChain.AVALANCHE
     */
    static get AVALANCHE(): EvmChain;
    /**
     * Returns FUJI chain
     *
     * @example EvmChain.FUJI
     */
    static get FUJI(): EvmChain;
    /**
     * Returns FANTOM chain
     *
     * @example EvmChain.FANTOM
     */
    static get FANTOM(): EvmChain;
    /**
     * Returns CRONOS chain
     *
     * @example EvmChain.CRONOS
     */
    static get CRONOS(): EvmChain;
    /**
     * Returns CRONOS_TESTNET chain
     *
     * @example EvmChain.CRONOS_TESTNET
     */
    static get CRONOS_TESTNET(): EvmChain;
    /**
     * Create a new instance of EvmChain from any valid address input.
     *
     * @example
     * ```ts
     * const chain = EvmChain.create(1)
     * const chain = EvmChain.create("0x3")
     * ```
     */
    static create(chain: EvmChainish, core?: MoralisCore): EvmChain;
    private _value;
    private _chainlistData;
    private constructor();
    private _getChainlistData;
    /**
     * Compares if 2 chains are equal, based on the chainId
     *
     * @param chainA - The first chain to compare
     * @param chainB - The second chain to compare
     *
     * @returns true if the chains are equal, false otherwise
     * @example
     * ```ts
     * EvmChain.equals("1", "0x1")
     * ```
     */
    static equals(chainA: EvmChainish, chainB: EvmChainish): boolean;
    /**
     * Compares if the current chain is equal to the provided chain, based on the chainId
     * @param chain - The chain to compare to
     * @returns true if the chains are equal, false otherwise
     * @example
     * ```ts
     * chain.equals(EvmChain.ETHEREUM)
     * ```
     */
    equals(chain: EvmChainish): boolean;
    /**
     * Formats the chain to the given output; in decimal value or as hex-string.
     * The default formatting can be set in MoralisConfig
     * @param _formatStyle - The output format to use
     * @example chain.format() // 1
     * @example chain.format('hex') // "0x1"
     * @example chain.format('decimal') // 1
     *
     * @returns The formatted chain
     */
    format(_formatStyle?: EvmChainIdFormat): string | number;
    /**
     * Displays the chain hex-string representation of the chain and also the chain name if not null
     *
     * @example chain.display() // "Ethereum (0x1)" | "0x1"
     */
    display(): string;
    /**
     * This function returns the explorer url of a block, transaction, account or token.
     *
     * @param value - An object containing the `block`, `transaction`, `account` or `erc20` to get the explorer url for.
     *
     * @example chain.getExplorerUrl({ block: 'block_here' }) // "https://etherscan.io/block/block_here"
     * @example chain.getExplorerUrl({ transaction: 'some_transaction' }) // "https://etherscan.io/tx/some_transaction"
     * @example chain.getExplorerUrl({ account: 'accoun_here' }) // "https://etherscan.io/address/accoun_here"
     * @example chain.getExplorerUrl({ erc20: 'token_here' }) // "https://etherscan.io/token/token_here"
     */
    getExplorerPath(value: {
        block: string;
    } | {
        transaction: string;
    } | {
        account: string;
    } | {
        erc20: string;
    }): string | null;
    /**
     * Returns the decimal representation of the chain
     * @example chain.decimal // 1
     */
    get decimal(): number;
    /**
     * Returns the hex-string representation of the chain
     * @example chain.hex // "0x1"
     */
    get hex(): string;
    /**
     * Validate and cast to api compatible hex
     *
     * @example chain.apiHex // "0x1"
     */
    get apiHex(): "0x1" | "0x3" | "0x4" | "0x5" | "0x2a" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "cronos" | "0x19";
    /**
     * Validate and cast to api compatible id
     *
     * @example chain.apiId // 1
     */
    get apiId(): "1" | "3" | "4" | "5" | "25" | "42" | "56" | "97" | "137" | "250" | "338" | "1337" | "43113" | "43114" | "80001";
    /**
     * Returns the name of the chain
     * @example chain.name // "Ethereum"
     */
    get name(): string | undefined;
    /**
     * Returns the currency of the chain
     * @returns The cuurrency of the chain or undefined if not found
     *
     * @example chain.currency // EvmNativeCurrency
     */
    get currency(): import("../../data/chaindata").EvmNativeCurrency | undefined;
    /**
     * Returns the rpc Urls of the chain
     *
     * @example chain.rpcUrls // ["https://mainnet.infura.io/v3/<infura-key>"]
     */
    get rpcUrls(): string[] | undefined;
    /**
     * Returns the explorer Urls of the chain
     *
     * @example chain.explorerUrls // ["https://etherscan.io/"]
     */
    get explorer(): {
        name: string;
        url: string;
        standard: "EIP3091" | "none";
        icon?: string | undefined;
    } | null;
}
//# sourceMappingURL=EvmChain.d.ts.map