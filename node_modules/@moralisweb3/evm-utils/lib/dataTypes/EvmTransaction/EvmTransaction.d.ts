import MoralisCore, { MoralisDataObject, BigNumber } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { EvmNative } from '../EvmNative';
import { EvmTransactionLog } from '../EvmTransactionLog';
import { EvmTransacionInput, EvmTransactionData } from './types';
/**
 * Valid input for a new EvmTransaction instance.
 * This can be an existing {@link EvmTransaction} or a valid {@link EvmTransacionInput} object
 */
export declare type EvmTransactionish = EvmTransacionInput | EvmTransaction;
/**
 * The EvmTranaction is a representation of a published transaction.
 *
 * Use this class any time you work with a transaction.
 *
 * @category DataType
 */
export declare class EvmTransaction implements MoralisDataObject {
    /**
     * Create a new instance of EvmTransaction from any valid transaction input
     * @param data - the EvmTransactionish type
     * @example
     * ```
     * const transaction = EvmTransaction.create(data);
     *```
     */
    static create(data: EvmTransactionish, core?: MoralisCore): EvmTransaction;
    private _data;
    constructor(data: EvmTransacionInput, core: MoralisCore);
    static parse: (data: EvmTransacionInput, core: MoralisCore) => EvmTransactionData;
    /**
     * Check the equality between two Evm transactions
     * @param dataA - The first transaction
     * @param dataB - The second transaction
     * @example
     * ```ts
     * EvmTransaction.equals(dataA, dataB)
     * ```
     */
    static equals(dataA: EvmTransactionish, dataB: EvmTransactionish): boolean;
    /**
     * Checks the equality of the current transaction with another evm transaction
     * @param data - the transaction to compare with
     * @example
     * ```ts
     * transaction.equals(data)
     * ```
     */
    equals(data: EvmTransactionish): boolean;
    toJSON(): {
        to: string | undefined;
        from: string;
        nonce: string | undefined;
        gas: string | undefined;
        gasPrice: string;
        gasUsed: string;
        cumulativeGasUsed: string;
        blockNumber: string;
        value: string | undefined;
        chain: string | number;
        contractAddress: string | undefined;
        logs: {
            address: string;
            chain: string | number;
            logIndex?: number | undefined;
            transactionHash: string;
            transactionIndex?: number | undefined;
            data: string;
            topics: string[];
            blockHash: string;
            blockNumber: number;
            blockTimestamp?: string | undefined;
        }[];
        blockTimestamp: string;
        data?: string | undefined;
        hash: string;
        type?: number | undefined;
        index: number;
        blockHash: string;
        receiptRoot?: string | undefined;
        receiptStatus?: number | undefined;
    };
    /**
     * @returns a JSON represention of the transaction.
     * @example
     * ```
     * transaction.format()
     * ```
     */
    format(): {
        to: string | undefined;
        from: string;
        nonce: string | undefined;
        gas: string | undefined;
        gasPrice: string;
        gasUsed: string;
        cumulativeGasUsed: string;
        blockNumber: string;
        value: string | undefined;
        chain: string | number;
        contractAddress: string | undefined;
        logs: {
            address: string;
            chain: string | number;
            logIndex?: number | undefined;
            transactionHash: string;
            transactionIndex?: number | undefined;
            data: string;
            topics: string[];
            blockHash: string;
            blockNumber: number;
            blockTimestamp?: string | undefined;
        }[];
        blockTimestamp: string;
        data?: string | undefined;
        hash: string;
        type?: number | undefined;
        index: number;
        blockHash: string;
        receiptRoot?: string | undefined;
        receiptStatus?: number | undefined;
    };
    /**
     * @returns the transaction
     * @example
     * ```
     * transaction.result
     * ```
     */
    get result(): EvmTransactionData;
    /**
     * @returns the transaction to address
     * @example
     * ```
     * transaction.to // EvmAddress
     * ```
     */
    get to(): EvmAddress | undefined;
    /**
     * @returns the transaction from address
     * @example
     * ```
     * transaction.address // EvmAddress
     * ```
     */
    get from(): EvmAddress;
    /**
     * @returns the transaction nonce
     * @example
     * ```
     * transaction.nonce // 326595425
     * ```
     */
    get nonce(): BigNumber | undefined;
    /**
     * @returns the transaction gas
     * @example
     * ```
     * transaction.gas // 6721975
     * ```
     */
    get gas(): BigNumber | undefined;
    /**
     * @returns the transaction gas price
     * @example
     * ```
     * transaction.gasPrice // 20000000000
     * ```
     */
    get gasPrice(): BigNumber;
    /**
     * @returns the transaction gas used
     * @example
     * ```
     * transaction.gasUsed // 1340925
     * ```
     */
    get gasUsed(): BigNumber;
    /**
     * @returns the transaction cumulative gas used
     * @example
     * ```
     * transaction.cumulativeGasUsed // 1340925
     * ```
     */
    get cumulativeGasUsed(): BigNumber;
    /**
     * @returns the transaction block number
     * @example
     * ```
     * transaction.blockNumber // 12526958
     * ```
     */
    get blockNumber(): BigNumber;
    /**
     * @returns the transaction value
     * @example
     * ```
     * transaction.value // EvmNative
     * ```
     */
    get value(): EvmNative | undefined;
    /**
     * @returns the transaction chain
     * @example
     * ```
     * transaction.chain // EvmChain
     * ```
     */
    get chain(): EvmChain;
    /**
     * @returns the transaction contract address
     * @example
     * ```
     * transaction.contractAddress // EvmAddress
     * ```
     */
    get contractAddress(): EvmAddress | undefined;
    /**
     * @returns the transaction logs
     * @example
     * ```
     * transaction.logs // EvmTransactionLog[]
     * ```
     */
    get logs(): EvmTransactionLog[];
    /**
     * @returns the transaction receipt root
     * @example
     * ```
     * transaction.receiptRoot // string
     * ```
     */
    get receiptRoot(): string | undefined;
    /**
     * @returns the transaction receipt status
     * @example
     * ```
     * transaction.receiptStatus // 1
     * ```
     */
    get receiptStatus(): number | undefined;
    /**
     * @returns the transaction data
     * @example
     * ```
     * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002
     * ```
     */
    get data(): string | undefined;
    /**
     * @returns the transaction hash
     * @example
     * ```
     * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e
     * ```
     */
    get hash(): string;
    /**
     * @returns the transaction type
     * @example
     * ```
     * transaction.type // 1
     * ```
     */
    get type(): number | undefined;
    /**
     * @returns the transaction black hash
     * @example
     * ```
     * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86
     * ```
     */
    get blockHash(): string;
    /**
     * @returns the transaction block timestamp
     * @example
     * ```
     * transaction.blockTimestamp // Date
     * ```
     */
    get blockTimestamp(): Date;
}
//# sourceMappingURL=EvmTransaction.d.ts.map