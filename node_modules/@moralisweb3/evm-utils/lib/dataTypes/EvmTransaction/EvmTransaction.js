"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmTransaction = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
var EvmNative_1 = require("../EvmNative");
var EvmTransactionLog_1 = require("../EvmTransactionLog");
/**
 * The EvmTranaction is a representation of a published transaction.
 *
 * Use this class any time you work with a transaction.
 *
 * @category DataType
 */
var EvmTransaction = /** @class */ (function () {
    function EvmTransaction(data, core) {
        this._data = EvmTransaction.parse(data, core);
    }
    /**
     * Create a new instance of EvmTransaction from any valid transaction input
     * @param data - the EvmTransactionish type
     * @example
     * ```
     * const transaction = EvmTransaction.create(data);
     *```
     */
    EvmTransaction.create = function (data, core) {
        if (data instanceof EvmTransaction) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : core_1.MoralisCoreProvider.getDefault();
        return new EvmTransaction(data, finalCore);
    };
    /**
     * Check the equality between two Evm transactions
     * @param dataA - The first transaction
     * @param dataB - The second transaction
     * @example
     * ```ts
     * EvmTransaction.equals(dataA, dataB)
     * ```
     */
    EvmTransaction.equals = function (dataA, dataB) {
        var transactionA = EvmTransaction.create(dataA);
        var transactionB = EvmTransaction.create(dataB);
        if (!transactionA._data.chain.equals(transactionB._data.chain)) {
            return false;
        }
        if (transactionA._data.hash !== transactionB._data.hash) {
            return false;
        }
        return true;
    };
    /**
     * Checks the equality of the current transaction with another evm transaction
     * @param data - the transaction to compare with
     * @example
     * ```ts
     * transaction.equals(data)
     * ```
     */
    EvmTransaction.prototype.equals = function (data) {
        return EvmTransaction.equals(this, data);
    };
    EvmTransaction.prototype.toJSON = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var data = this._data;
        return __assign(__assign({}, data), { to: (_a = data.to) === null || _a === void 0 ? void 0 : _a.format(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.format(), nonce: (_c = data.nonce) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), gasPrice: (_e = data.gasPrice) === null || _e === void 0 ? void 0 : _e.toString(), gasUsed: (_f = data.gasUsed) === null || _f === void 0 ? void 0 : _f.toString(), cumulativeGasUsed: (_g = data.cumulativeGasUsed) === null || _g === void 0 ? void 0 : _g.toString(), blockNumber: (_h = data.blockNumber) === null || _h === void 0 ? void 0 : _h.toString(), value: (_j = data.value) === null || _j === void 0 ? void 0 : _j.toString(), chain: (_k = data.chain) === null || _k === void 0 ? void 0 : _k.format(), contractAddress: (_l = data.contractAddress) === null || _l === void 0 ? void 0 : _l.format(), logs: data.logs.map(function (log) { return log.toJSON(); }), blockTimestamp: data.blockTimestamp.toString() });
    };
    /**
     * @returns a JSON represention of the transaction.
     * @example
     * ```
     * transaction.format()
     * ```
     */
    EvmTransaction.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmTransaction.prototype, "result", {
        /**
         * @returns the transaction
         * @example
         * ```
         * transaction.result
         * ```
         */
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "to", {
        /**
         * @returns the transaction to address
         * @example
         * ```
         * transaction.to // EvmAddress
         * ```
         */
        get: function () {
            return this._data.to;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "from", {
        /**
         * @returns the transaction from address
         * @example
         * ```
         * transaction.address // EvmAddress
         * ```
         */
        get: function () {
            return this._data.from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "nonce", {
        /**
         * @returns the transaction nonce
         * @example
         * ```
         * transaction.nonce // 326595425
         * ```
         */
        get: function () {
            return this._data.nonce;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "gas", {
        /**
         * @returns the transaction gas
         * @example
         * ```
         * transaction.gas // 6721975
         * ```
         */
        get: function () {
            return this._data.gas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "gasPrice", {
        /**
         * @returns the transaction gas price
         * @example
         * ```
         * transaction.gasPrice // 20000000000
         * ```
         */
        get: function () {
            return this._data.gasPrice;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "gasUsed", {
        /**
         * @returns the transaction gas used
         * @example
         * ```
         * transaction.gasUsed // 1340925
         * ```
         */
        get: function () {
            return this._data.gasUsed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "cumulativeGasUsed", {
        /**
         * @returns the transaction cumulative gas used
         * @example
         * ```
         * transaction.cumulativeGasUsed // 1340925
         * ```
         */
        get: function () {
            return this._data.cumulativeGasUsed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "blockNumber", {
        /**
         * @returns the transaction block number
         * @example
         * ```
         * transaction.blockNumber // 12526958
         * ```
         */
        get: function () {
            return this._data.blockNumber;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "value", {
        /**
         * @returns the transaction value
         * @example
         * ```
         * transaction.value // EvmNative
         * ```
         */
        get: function () {
            return this._data.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "chain", {
        /**
         * @returns the transaction chain
         * @example
         * ```
         * transaction.chain // EvmChain
         * ```
         */
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "contractAddress", {
        /**
         * @returns the transaction contract address
         * @example
         * ```
         * transaction.contractAddress // EvmAddress
         * ```
         */
        get: function () {
            return this._data.contractAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "logs", {
        /**
         * @returns the transaction logs
         * @example
         * ```
         * transaction.logs // EvmTransactionLog[]
         * ```
         */
        get: function () {
            return this._data.logs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "receiptRoot", {
        /**
         * @returns the transaction receipt root
         * @example
         * ```
         * transaction.receiptRoot // string
         * ```
         */
        get: function () {
            return this._data.receiptRoot;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "receiptStatus", {
        /**
         * @returns the transaction receipt status
         * @example
         * ```
         * transaction.receiptStatus // 1
         * ```
         */
        get: function () {
            return this._data.receiptStatus;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "data", {
        /**
         * @returns the transaction data
         * @example
         * ```
         * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002
         * ```
         */
        get: function () {
            return this._data.data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "hash", {
        /**
         * @returns the transaction hash
         * @example
         * ```
         * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e
         * ```
         */
        get: function () {
            return this._data.hash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "type", {
        /**
         * @returns the transaction type
         * @example
         * ```
         * transaction.type // 1
         * ```
         */
        get: function () {
            return this._data.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "blockHash", {
        /**
         * @returns the transaction black hash
         * @example
         * ```
         * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86
         * ```
         */
        get: function () {
            return this._data.blockHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransaction.prototype, "blockTimestamp", {
        /**
         * @returns the transaction block timestamp
         * @example
         * ```
         * transaction.blockTimestamp // Date
         * ```
         */
        get: function () {
            return this._data.blockTimestamp;
        },
        enumerable: false,
        configurable: true
    });
    EvmTransaction.parse = function (data, core) {
        var _a;
        return ({
            from: EvmAddress_1.EvmAddress.create(data.from, core),
            to: (0, core_1.maybe)(data.to, function (to) { return EvmAddress_1.EvmAddress.create(to, core); }),
            nonce: (0, core_1.maybe)(data.nonce, core_1.BigNumber.create),
            data: (0, core_1.maybe)(data.data),
            value: (0, core_1.maybe)(data.value, function (val) { return EvmNative_1.EvmNative.create(val, 'wei'); }),
            hash: data.hash,
            type: (0, core_1.maybe)(data.type),
            chain: EvmChain_1.EvmChain.create(data.chain),
            gas: (0, core_1.maybe)(data.gas, core_1.BigNumber.create),
            gasPrice: core_1.BigNumber.create(data.gasPrice),
            index: +data.index,
            blockNumber: core_1.BigNumber.create(data.blockNumber),
            blockHash: data.blockHash,
            blockTimestamp: (0, core_1.dateInputToDate)(data.blockTimestamp),
            cumulativeGasUsed: core_1.BigNumber.create(data.cumulativeGasUsed),
            gasUsed: core_1.BigNumber.create(data.gasUsed),
            contractAddress: (0, core_1.maybe)(data.contractAddress, function (address) { return EvmAddress_1.EvmAddress.create(address, core); }),
            receiptRoot: (0, core_1.maybe)(data.receiptRoot),
            receiptStatus: (0, core_1.maybe)(data.receiptStatus, function (status) { return +status; }),
            logs: ((_a = data.logs) !== null && _a !== void 0 ? _a : []).map(function (log) { return EvmTransactionLog_1.EvmTransactionLog.create(log); }),
        });
    };
    return EvmTransaction;
}());
exports.EvmTransaction = EvmTransaction;
//# sourceMappingURL=EvmTransaction.js.map