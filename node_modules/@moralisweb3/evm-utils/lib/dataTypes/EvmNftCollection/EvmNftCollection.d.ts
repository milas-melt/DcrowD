import MoralisCore, { MoralisDataObject } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { EvmNftCollectionData, EvmNftCollectionInput } from './types';
/**
 * Valid input for a new EvmNftCollection instance.
 * This can be an existing {@link EvmNftCollection} or a valid {@link EvmNftCollectionInput} object
 */
export declare type EvmNftCollectionish = EvmNftCollectionInput | EvmNftCollection;
/**
 * The EvmNftCollection is a representation of an nft collection.
 *
 * @category DataType
 */
export declare class EvmNftCollection implements MoralisDataObject {
    /**
     * Create a new instance of EvmNftCollection from any valid transaction input
     * @param data - the EvmNftCollectionish type
     * @example const collection = EvmTransaction.create(data);
     */
    static create(data: EvmNftCollectionish, core?: MoralisCore): EvmNftCollection;
    private _data;
    constructor(data: EvmNftCollectionInput, core: MoralisCore);
    static parse: (data: EvmNftCollectionInput, core: MoralisCore) => EvmNftCollectionData;
    /**
     * Check the equality between two Evm collections. It compares their hashes and collections.
     * @param dataA - The first collection to compare
     * @param dataB - The second collection to compare
     * @example EvmNftCollection.equals(dataA, dataB)
     */
    static equals(dataA: EvmNftCollectionish, dataB: EvmNftCollectionish): boolean;
    /**
     * Checks the equality of the current collection with another evm collection
     * @param data - the collection to compare with
     * @example
     * ```ts
     * collection.equals(data)
     * ```
     */
    equals(data: EvmNftCollectionish): boolean;
    /**
     * @returns a JSON represention of the collection.
     * @example
     * ```
     * collection.toJSON()
     * ```
     */
    toJSON(): {
        chain: string | number;
        tokenAddress: string;
        contractType?: string | undefined;
        name: string;
        symbol: string;
    };
    /**
     * @returns a JSON represention of the collection.
     * @example
     * ```
     * collection.format()
     * ```
     */
    format(): {
        chain: string | number;
        tokenAddress: string;
        contractType?: string | undefined;
        name: string;
        symbol: string;
    };
    /**
     * @returns all the data without casting it to JSON.
     * @example collection.result
     */
    get result(): EvmNftCollectionData;
    /**
     * @returns the chain where the collection is deployed.
     * @example collection.chain // EvmChain
     */
    get chain(): EvmChain;
    /**
     * @returns the token address of collection.
     * @example collection.tokenAddress // EvmAddress
     */
    get tokenAddress(): EvmAddress;
    /**
     * @returns the token type of collection.
     * @example collection.tokenAddress // 'ERC721'
     */
    get contractType(): string | undefined;
    /**
     * @returns the token name of collection.
     * @example collection.tokenAddress // 'Test NFT'
     */
    get name(): string;
    /**
     * @returns the token symbol of collection.
     * @example collection.symbol // 'TEST'
     */
    get symbol(): string;
}
//# sourceMappingURL=EvmNftCollection.d.ts.map