import MoralisCore, { MoralisDataObject, MoralisDataObjectValue, BigNumber } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { EvmNftData, EvmNftInput } from './types';
/**
 * Valid input for a new EvmNft instance.
 * This can be an existing {@link EvmNft} or a valid {@link EvmNftInput} object
 */
export declare type EvmNftish = EvmNftInput | EvmNft;
/**
 * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155
 *
 * @category DataType
 */
export declare class EvmNft implements MoralisDataObject {
    /**
     * Create a new instance of EvmNft from any valid address input
     *
     * @param data - the EvmNftish type
     * @param core - the MoralisCore instance
     * @example
     * ```ts
     * const nft = EvmNft.create(data);
     * ```
     * @returns an instance of EvmNft
     */
    static create(data: EvmNftish, core?: MoralisCore): EvmNft;
    private _data;
    constructor(data: EvmNftInput, core: MoralisCore);
    static parse: (data: EvmNftInput, core: MoralisCore) => EvmNftData;
    /**
     * This function confirms that the NFT metadata is a valid JSON string.
     *
     * @param value - the new value for the NFT metadata
     * @returns the parsed value of the JSON string
     * @throws {MoralisCoreError} if the value is not a valid JSON string
     */
    private static validateMetadata;
    /**
     * Compares two EvmNftish data. verifies that the chain, tokenAddress and owner of values are equal.
     * @param valueA - the first EvmNftish data to compare
     * @param valueB - the second EvmNftish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  EvmNft.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: EvmNftish, valueB: EvmNftish): boolean;
    /**
     * Compares an EvmNftish data to this EvmNft instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * nft.equals(value);
     * ```
     */
    equals(value: EvmNftish): boolean;
    /**
     * Converts the EvmNft instance to a JSON object.
     * @returns JSON object of the EvmNft instance
     * @example `nft.toJSON()`
     */
    toJSON(): {
        tokenAddress: string;
        chain: string | number;
        ownerOf: string | undefined;
        blockNumberMinted: string | undefined;
        blockNumber: string | undefined;
        tokenId: string | number;
        contractType?: string | undefined;
        tokenUri?: string | undefined;
        tokenHash?: string | undefined;
        metadata?: MoralisDataObjectValue | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        lastMetadataSync?: Date | undefined;
        lastTokenUriSync?: Date | undefined;
        amount?: number | undefined;
    };
    /**
     * Converts the EvmNft instance to a JSON object.
     * @returns JSON object of the EvmNft instance
     * @example `nft.format()`
     */
    format(): {
        tokenAddress: string;
        chain: string | number;
        ownerOf: string | undefined;
        blockNumberMinted: string | undefined;
        blockNumber: string | undefined;
        tokenId: string | number;
        contractType?: string | undefined;
        tokenUri?: string | undefined;
        tokenHash?: string | undefined;
        metadata?: MoralisDataObjectValue | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        lastMetadataSync?: Date | undefined;
        lastTokenUriSync?: Date | undefined;
        amount?: number | undefined;
    };
    get result(): EvmNftData;
    /**
     * @returns the NFT chain
     * @example
     * ```
     * nft.chain // EvmChain
     * ```
     */
    get chain(): EvmChain;
    /**
     * @returns the NFT contract type
     * @example
     * ```
     * nft.contractType // "ERC721" | "ERC1155"
     * ```
     */
    get contractType(): string | undefined;
    /**
     * @returns the NFT token address
     * @example
     * ```
     * nft.tokenAddress // EvmAddress
     * ```
     */
    get tokenAddress(): EvmAddress;
    /**
     * @returns the NFT metadata
     * @example
     * ```ts
     * nft.metadata
     * // {
     * // name: 'Pancake',
     * // description: 'The dessert series 1',
     * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',
     * // }
     * ```
     */
    get metadata(): MoralisDataObjectValue | undefined;
    /**
     * @returns the NFT token URI
     * @example
     * ```
     * nft.tokenUri // "https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json"
     * ```
     */
    get tokenUri(): string | undefined;
    /**
     * @returns the NFT token hash
     * @example
     * ```
     * nft.tokenHash // "QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC"
     * ```
     */
    get tokenHash(): string | undefined;
    /**
     * @returns the NFT name
     * @example
     * ```
     * nft.name // "Tether USD"
     * ```
     */
    get name(): string | undefined;
    /**
     * @returns the NFT symbol
     * @example
     * ```
     * nft.symbol // "USDT"
     * ```
     */
    get symbol(): string | undefined;
    /**
     * @returns the NFT owner of address
     * @example
     * ```
     * nft.ownerOf // EvmAddress
     * ```
     */
    get ownerOf(): EvmAddress | undefined;
    /**
     * @returns the NFT block number minted from
     * @example
     * ```
     * nft.blockNumberMinted // BigNumber
     * ```
     */
    get blockNumberMinted(): BigNumber | undefined;
    /**
     * @returns the NFT block number
     * @example
     * ```
     * nft.blockNumber // BigNumber
     * ```
     */
    get blockNumber(): BigNumber | undefined;
    /**
     * @returns the NFT latest metadata sync date
     * @example
     * ```
     * nft.latestMetadataSync // Date
     * ```
     */
    get lastMetadataSync(): Date | undefined;
    /**
     * @returns the NFT latest token URI sync date
     * @example
     * ```
     * nft.latestTokenUriSync // Date
     * ```
     */
    get lastTokenUriSync(): Date | undefined;
    /**
     * @returns the NFT amount
     * @example
     * ```
     * nft.amount // 2
     * ```
     */
    get amount(): number | undefined;
}
//# sourceMappingURL=EvmNft.d.ts.map