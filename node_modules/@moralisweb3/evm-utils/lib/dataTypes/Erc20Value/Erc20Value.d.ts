import { BigNumber, BigNumberish, MoralisData } from '@moralisweb3/core';
import { Erc20Token, Erc20Tokenish } from '../Erc20/Erc20';
/**
 * {@link BigNumberish} type for the amount of tokens
 */
export declare type Erc20ValueInputAmount = BigNumberish;
/**
 * This is a number or a string that represents the decimals of tokens
 */
export declare type Erc20ValueInputDecimals = number | string;
/**
 * Valid input for a new Erc20Value instance.
 * This can be an existing {@link Erc20Value} or a valid {@link Erc20ValueInputAmount} object
 */
export declare type Erc20Valueish = Erc20ValueInputAmount | Erc20Value;
/**
 * This is the return type of the processed Erc20Value
 */
export declare type Erc20ValueData = {
    amount: BigNumber;
    decimals: number;
};
/**
 * The options for the Erc20Value class
 */
export declare type Erc20Options = {
    decimals?: Erc20ValueInputDecimals;
    token?: Erc20Tokenish;
};
/**
 * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token
 * It holds data about the data about the amount of tokens and the number of decimals.
 *
 * @category DataType
 */
export declare class Erc20Value implements MoralisData {
    /**
     * Create a new instance of Erc20Value from any valid input
     * @param value - The value to create
     * @param options - The options for the token
     * @example Erc20Value.create(1000, { decimals: 3 });
     * @returns The created value
     * @throws MoralisCoreError if the value is invalid
     */
    static create(value: Erc20Valueish, options?: Erc20Options): Erc20Value;
    private _value;
    private _token?;
    constructor(amount: Erc20ValueInputAmount, options?: Erc20Options);
    static parse: ({ amount, decimals, token, }: {
        amount: Erc20ValueInputAmount;
        decimals: Erc20ValueInputDecimals;
        token?: Erc20Tokenish | undefined;
    }) => Erc20ValueData;
    /**
     * Compares two Erc20Valueish instances.
     * @param valueA - The first value to compare
     * @param valueB - The second value to compare
     * @returns True if the values are equal
     * @example
     * ```ts
     * const valueA = Erc20Value.create(1000, { decimals: 3 });
     * const valueB = Erc20Value.create(10000, { decimals: 4 });
     * Erc20Value.equals(valueA, valueB); // true
     * ```
     */
    static equals(valueA: Erc20Valueish, valueB: Erc20Valueish): boolean;
    /**
     * Compares Erc20Value with current instance.
     * @param value - The value to compare
     * @returns True if the values are equal
     * @example value.equals(valueA);
     */
    equals(value: Erc20Valueish): boolean;
    /**
     * Convert the value to a number
     * @returns the value in number format
     * @example value.toNumber();
     */
    toNumber(): number;
    /**
     * Convert the value to a string
     * @returns the value in string format
     * @example value.toString();
     */
    toString(): string;
    /**
     * Displays the token in text format
     * @returns the value and also the token symbol if available
     * @example value.display();
     */
    display: () => string;
    /**
     * Convert the value to a string
     * @returns the value in string format
     * @example value.format();
     */
    format(): string;
    /**
     * Displays the token in JSON format
     * @returns the value and also the token if available
     * @example value.toJSON();
     */
    toJSON(): {
        value: string;
        token: {
            contractAddress: string;
            chain: string | number;
            decimals: number;
            name: string;
            symbol: string;
            logo?: string | null | undefined;
            logoHash?: string | null | undefined;
            thumbnail?: string | null | undefined;
        };
    } | {
        value: string;
        token?: undefined;
    };
    /**
     * @returns the token decimals
     * @example value.decimals; // 15
     */
    get decimals(): number;
    /**
     * @returns the token amount
     * @example value.amount; // BigNumber
     */
    get amount(): BigNumber;
    /**
     * @returns the token value
     * @example value.value; // "1000"
     */
    get value(): string;
    /**
     * @returns the token
     * @example value.token; // Erc20Token
     */
    get token(): Erc20Token | null;
}
//# sourceMappingURL=Erc20Value.d.ts.map