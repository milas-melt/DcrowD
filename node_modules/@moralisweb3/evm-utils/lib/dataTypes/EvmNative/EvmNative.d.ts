import { BigNumber, BigNumberish, MoralisData } from '@moralisweb3/core';
/**
 * Type containing valid EVM native units
 */
export declare type EvmNativeUnit = 'ether' | 'finney' | 'szabo' | 'gwei' | 'mwei' | 'kwei' | 'wei';
/**
 * A valid {@link EvmNativeUnit} or a number type
 */
declare type UnitOrDecimals = EvmNativeUnit | number;
/**
 * This is any valid {@link BigNumberish} value.
 */
export declare type InputEvmNative = BigNumberish;
/**
 * Valid input for a new EvmNative instance.
 * This can be an existing {@link EvmNative} or a valid {@link InputEvmNative} type
 */
export declare type EvmNativeish = InputEvmNative | EvmNative;
/**
 * The EvmNative class is a MoralisData that references to a the value of a native currency (like ETH, BNB etc.)
 *
 * @category DataType
 */
export declare class EvmNative implements MoralisData {
    private readonly rawValue;
    /**
     * Returns value of one ether.
     *
     * @example EvmNative.ONE_ETH
     */
    static get ONE_ETH(): EvmNative;
    /**
     * Returns value of one gwei.
     *
     * @example EvmNative.ONE_GWEI
     */
    static get ONE_GWEI(): EvmNative;
    /**
     * Returns value of one wei.
     *
     * @example EvmNative.ONE_WEI
     */
    static get ONE_WEI(): EvmNative;
    /**
     * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.
     * @param native - the value to create the EvmNative from
     * @param unit - the unit of the value (optional), defaults to `ether`
     * @returns a new instance of EvmNative
     * @example
     * ```ts
     * const native = EvmNative.create(2, 'gwei');
     * const native = EvmNative.create(2);
     * const native = EvmNative.create(2, 'wei');
     *```
     */
    static create(native: EvmNativeish, unit?: UnitOrDecimals): EvmNative;
    private constructor();
    private static parse;
    /**
     * Compares two EvmNative values.
     * @param valueA - the first value to compare
     * @param valueB - the second value to compare
     * @returns true if the values are equal
     * @example
     * ```ts
     * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true
     * ```
     */
    static equals(valueA: EvmNativeish, valueB: EvmNativeish): boolean;
    /**
     * Compares EvmNative with current instance.
     * @param value - the value to compare with
     * @returns true if the values are equal
     * @example
     * ```ts
     * const native = EvmNative.create(1, 'gwei');
     * native.equals(EvmNative.create(1, 'ether')); // false
     * ```
     */
    equals(value: EvmNative): boolean;
    /**
     * Converts the EvmNative to a string.
     * @returns the value of the EvmNative as a string
     * @example `native.toString()`
     */
    toString(): string;
    /**
     * Converts the EvmNative to a string.
     * @returns the value of the EvmNative as a string
     * @example `native.format()`
     */
    format(): string;
    /**
     * @returns the value of the EvmNative as a BigNumber
     * @example `native.value`
     */
    get value(): BigNumber;
    /**
     * Converts the EvmNative to a string representation of the value in wei.
     * @returns the value of the EvmNative as a string
     * @example `native.wei`
     */
    get wei(): string;
    /**
     * Converts the EvmNative to a string representation of the value in gwei.
     * @returns the value of the EvmNative as a string
     * @example `native.gwei`
     */
    get gwei(): string;
    /**
     * Converts the EvmNative to a string representation of the value in ether.
     * @returns the value of the EvmNative as a string
     * @example `native.ether`
     */
    get ether(): string;
}
export {};
//# sourceMappingURL=EvmNative.d.ts.map