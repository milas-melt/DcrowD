"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmNative = void 0;
var core_1 = require("@moralisweb3/core");
var unitToDecimals = {
    ether: 18,
    finney: 15,
    szabo: 12,
    gwei: 9,
    mwei: 6,
    kwei: 3,
    wei: 0,
};
/**
 * The EvmNative class is a MoralisData that references to a the value of a native currency (like ETH, BNB etc.)
 *
 * @category DataType
 */
var EvmNative = /** @class */ (function () {
    function EvmNative(native, unit) {
        if (unit === void 0) { unit = 'ether'; }
        this.rawValue = EvmNative.parse(native, unit);
    }
    Object.defineProperty(EvmNative, "ONE_ETH", {
        /**
         * Returns value of one ether.
         *
         * @example EvmNative.ONE_ETH
         */
        get: function () {
            return EvmNative.create(1, 'ether');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNative, "ONE_GWEI", {
        /**
         * Returns value of one gwei.
         *
         * @example EvmNative.ONE_GWEI
         */
        get: function () {
            return EvmNative.create(1, 'gwei');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNative, "ONE_WEI", {
        /**
         * Returns value of one wei.
         *
         * @example EvmNative.ONE_WEI
         */
        get: function () {
            return EvmNative.create(1, 'wei');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.
     * @param native - the value to create the EvmNative from
     * @param unit - the unit of the value (optional), defaults to `ether`
     * @returns a new instance of EvmNative
     * @example
     * ```ts
     * const native = EvmNative.create(2, 'gwei');
     * const native = EvmNative.create(2);
     * const native = EvmNative.create(2, 'wei');
     *```
     */
    EvmNative.create = function (native, unit) {
        if (native instanceof EvmNative) {
            return native;
        }
        return new EvmNative(native, unit);
    };
    EvmNative.parse = function (native, unit) {
        var decimals;
        if (typeof unit === 'number') {
            decimals = unit;
        }
        else {
            if (unitToDecimals[unit] == null) {
                throw new core_1.MoralisCoreError({
                    code: core_1.CoreErrorCode.INVALID_ARGUMENT,
                    message: 'Unit should be a decimal number or valid EvmNativeUnit string',
                });
            }
            decimals = unitToDecimals[unit];
        }
        return core_1.BigNumber.fromDecimal(native.toString(), decimals);
    };
    /**
     * Compares two EvmNative values.
     * @param valueA - the first value to compare
     * @param valueB - the second value to compare
     * @returns true if the values are equal
     * @example
     * ```ts
     * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true
     * ```
     */
    EvmNative.equals = function (valueA, valueB) {
        var evmNativeA = EvmNative.create(valueA);
        var evmNativeB = EvmNative.create(valueB);
        return evmNativeA.rawValue.equals(evmNativeB.rawValue);
    };
    /**
     * Compares EvmNative with current instance.
     * @param value - the value to compare with
     * @returns true if the values are equal
     * @example
     * ```ts
     * const native = EvmNative.create(1, 'gwei');
     * native.equals(EvmNative.create(1, 'ether')); // false
     * ```
     */
    EvmNative.prototype.equals = function (value) {
        return EvmNative.equals(this, value);
    };
    /**
     * Converts the EvmNative to a string.
     * @returns the value of the EvmNative as a string
     * @example `native.toString()`
     */
    EvmNative.prototype.toString = function () {
        return this.wei;
    };
    /**
     * Converts the EvmNative to a string.
     * @returns the value of the EvmNative as a string
     * @example `native.format()`
     */
    EvmNative.prototype.format = function () {
        return this.toString();
    };
    Object.defineProperty(EvmNative.prototype, "value", {
        /**
         * @returns the value of the EvmNative as a BigNumber
         * @example `native.value`
         */
        get: function () {
            return this.rawValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNative.prototype, "wei", {
        /**
         * Converts the EvmNative to a string representation of the value in wei.
         * @returns the value of the EvmNative as a string
         * @example `native.wei`
         */
        get: function () {
            return this.value.toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNative.prototype, "gwei", {
        /**
         * Converts the EvmNative to a string representation of the value in gwei.
         * @returns the value of the EvmNative as a string
         * @example `native.gwei`
         */
        get: function () {
            return this.rawValue.toDecimal(unitToDecimals['gwei']);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmNative.prototype, "ether", {
        /**
         * Converts the EvmNative to a string representation of the value in ether.
         * @returns the value of the EvmNative as a string
         * @example `native.ether`
         */
        get: function () {
            return this.rawValue.toDecimal(unitToDecimals['ether']);
        },
        enumerable: false,
        configurable: true
    });
    return EvmNative;
}());
exports.EvmNative = EvmNative;
//# sourceMappingURL=EvmNative.js.map