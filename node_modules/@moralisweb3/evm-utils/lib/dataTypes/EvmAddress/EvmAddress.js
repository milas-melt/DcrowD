"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmAddress = void 0;
var core_1 = require("@moralisweb3/core");
var address_1 = require("@ethersproject/address");
var EvmUtilsConfig_1 = require("../../config/EvmUtilsConfig");
/**
 * A representation of an address on the EVM network.
 *
 * Use this class any time you work with an address, as it will provide utilities to validate the address,
 * and format it to lowercase and checksum format.
 *
 * @category DataType
 */
var EvmAddress = /** @class */ (function () {
    function EvmAddress(address, config) {
        this.config = config;
        this._value = EvmAddress.parse(address);
    }
    Object.defineProperty(EvmAddress, "ZERO_ADDRESS", {
        /**
         * @returns EvmAddress instance of the zero address: "0x0000000000000000000000000000000000000000"
         * @example `EvmAddress.ZERO_ADDRESS`
         */
        get: function () {
            return EvmAddress.create('0x0000000000000000000000000000000000000000');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create a new instance of EvmAddress from any valid address input
     *
     * @example
     * ```
     * const address = EvmAddress.create("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")
     * const address = EvmAddress.create("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359")
     * const address = EvmAddress.ZERO_ADDRESS
     * ```
     */
    EvmAddress.create = function (address, core) {
        if (address instanceof EvmAddress) {
            return address;
        }
        var finalCore = core || core_1.MoralisCoreProvider.getDefault();
        return new EvmAddress(address, finalCore.config);
    };
    EvmAddress.parse = function (address) {
        if (!(0, address_1.isAddress)(address)) {
            throw new core_1.MoralisCoreError({
                code: core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: 'Invalid address provided',
            });
        }
        return (0, address_1.getAddress)(address);
    };
    /**
     * Check the equality between two Evm addresses
     * @example `EvmAddress.equals("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359", "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")`
     */
    EvmAddress.equals = function (addressA, addressB) {
        return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;
    };
    /**
     * Checks the equality of the current address with another evm address
     * @example `address.equals("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")`
     */
    EvmAddress.prototype.equals = function (address) {
        return EvmAddress.equals(this, address);
    };
    /**
     * Formats the address to a specific format.
     * If no formatStyle is provided as argument, it will use the `formatEvmAddress` set in the config.
     * @example `address.format() // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
     */
    EvmAddress.prototype.format = function (style) {
        var formatStyle = style !== null && style !== void 0 ? style : this.config.get(EvmUtilsConfig_1.EvmUtilsConfig.formatEvmAddress);
        if (formatStyle === 'checksum') {
            return this.checksum;
        }
        if (formatStyle === 'lowercase') {
            return this.lowercase;
        }
        throw new core_1.MoralisCoreError({
            code: core_1.CoreErrorCode.INVALID_ARGUMENT,
            message: 'Cannot format address, invalid config.formatAddress',
        });
    };
    Object.defineProperty(EvmAddress.prototype, "checksum", {
        /**
         * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)
         * @example `address.checksum // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmAddress.prototype, "lowercase", {
        /**
         * @returns the address value in lowercase format
         * @example `address.lowercase // "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"`
         */
        get: function () {
            return this._value.toLowerCase();
        },
        enumerable: false,
        configurable: true
    });
    return EvmAddress;
}());
exports.EvmAddress = EvmAddress;
//# sourceMappingURL=EvmAddress.js.map