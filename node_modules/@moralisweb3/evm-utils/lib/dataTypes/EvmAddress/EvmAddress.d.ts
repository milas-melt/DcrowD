import { MoralisCore, EvmAddressFormat, Config, MoralisData } from '@moralisweb3/core';
/**
 * This can be any valid EVM address, formatted as lowercase or checksum.
 * @example "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"
 * @example "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"
 */
export declare type EvmAddressInput = string;
/**
 * Valid input for a new EvmAddress instance.
 * This can be an existing EvmAddress or a valid address string as lowercase, or checksum format.
 */
export declare type EvmAddressish = EvmAddress | EvmAddressInput;
/**
 * A representation of an address on the EVM network.
 *
 * Use this class any time you work with an address, as it will provide utilities to validate the address,
 * and format it to lowercase and checksum format.
 *
 * @category DataType
 */
export declare class EvmAddress implements MoralisData {
    private readonly config;
    /**
     * @returns EvmAddress instance of the zero address: "0x0000000000000000000000000000000000000000"
     * @example `EvmAddress.ZERO_ADDRESS`
     */
    static get ZERO_ADDRESS(): EvmAddress;
    /**
     * Create a new instance of EvmAddress from any valid address input
     *
     * @example
     * ```
     * const address = EvmAddress.create("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")
     * const address = EvmAddress.create("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359")
     * const address = EvmAddress.ZERO_ADDRESS
     * ```
     */
    static create(address: EvmAddressish, core?: MoralisCore): EvmAddress;
    /**
     * Internal reference of the address in checksum format
     */
    private _value;
    constructor(address: EvmAddressInput, config: Config);
    private static parse;
    /**
     * Check the equality between two Evm addresses
     * @example `EvmAddress.equals("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359", "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")`
     */
    static equals(addressA: EvmAddressish, addressB: EvmAddressish): boolean;
    /**
     * Checks the equality of the current address with another evm address
     * @example `address.equals("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")`
     */
    equals(address: EvmAddressish): boolean;
    /**
     * Formats the address to a specific format.
     * If no formatStyle is provided as argument, it will use the `formatEvmAddress` set in the config.
     * @example `address.format() // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
     */
    format(style?: EvmAddressFormat): string;
    /**
     * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)
     * @example `address.checksum // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
     */
    get checksum(): string;
    /**
     * @returns the address value in lowercase format
     * @example `address.lowercase // "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"`
     */
    get lowercase(): string;
}
//# sourceMappingURL=EvmAddress.d.ts.map