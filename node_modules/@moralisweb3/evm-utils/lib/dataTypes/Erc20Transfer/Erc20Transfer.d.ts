import { MoralisDataObject, BigNumber } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { Erc20TransferInput, Erc20TransferData } from './types';
/**
 * Valid input for a new Erc20Transfer instance.
 * This can be an existing {@link Erc20Transfer} or a valid {@link Erc20TransferInput} object
 */
export declare type Erc20Transferish = Erc20TransferInput | Erc20Transfer;
/**
 * The Erc20Transfer is a representation of an Erc20 token transfer.
 *
 * @category DataType
 */
export declare class Erc20Transfer implements MoralisDataObject {
    /**
     * Create a new instance of Erc20Transfer from any valid input
     * @param data - the Erc20Transferish type
     * @example
     * ```
     * const transfer = Erc20Transfer.create(data);
     *```
     */
    static create(data: Erc20Transferish): Erc20Transfer;
    private _data;
    constructor(data: Erc20TransferInput);
    static parse: (data: Erc20TransferInput) => Erc20TransferData;
    /**
     * Check the equality between two Erc20 transfers
     * @param dataA - The first transfer to compare
     * @param dataB - The second transfer to compare
     * @example Erc20Transfer.equals(dataA, dataB)
     * @returns true if the transfers are equal, false otherwise
     */
    static equals(dataA: Erc20Transferish, dataB: Erc20Transferish): boolean;
    /**
     * Checks the equality of the current trnasfer with another erc20 trnasfer
     * @param data - the trnasfer to compare with
     * @example transfer.equals(data)
     * @returns true if the transfers are equal, false otherwise
     */
    equals(data: Erc20Transferish): boolean;
    /**
     * @returns a JSON represention of the transfer.
     * @example transfer.toJSON()
     */
    toJSON(): {
        chain: string | number;
        address: string;
        blockNumber: string;
        toAddress: string;
        fromAddress: string;
        value: string;
        transactionHash: string;
        blockTimestamp: Date;
        blockHash: string;
    };
    /**
     * @returns a JSON represention of the transfer.
     * @example transfer.format()
     */
    format(): {
        chain: string | number;
        address: string;
        blockNumber: string;
        toAddress: string;
        fromAddress: string;
        value: string;
        transactionHash: string;
        blockTimestamp: Date;
        blockHash: string;
    };
    /**
     * @returns all the data without casting it to JSON.
     * @example transfer.result
     */
    get result(): Erc20TransferData;
    /**
     * @returns the address of the tranfer
     * @example transfer.address // EvmAddress
     */
    get address(): EvmAddress;
    /**
     * @returns the block hash of the tranfer
     * @example transfer.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
     */
    get blockHash(): string;
    /**
     * @returns the block number of the tranfer
     * @example transfer.blockNumber // BigNumber
     */
    get blockNumber(): BigNumber;
    /**
     * @returns the block timestamp of the tranfer
     * @example transfer.blockTimestamp // Date
     */
    get blockTimestamp(): Date;
    /**
     * @returns the chain of the tranfer
     * @example transfer.chain // EvmChain
     */
    get chain(): EvmChain;
    /**
     * @returns the from address of the tranfer
     * @example transfer.fromAddress // EvmAddress
     */
    get fromAddress(): EvmAddress;
    /**
     * @returns the to address of the tranfer
     * @example transfer.toAddress // EvmAddress
     */
    get toAddress(): EvmAddress;
    /**
     * @returns the transaction hash of the tranfer
     * @example transfer.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
     */
    get transactionHash(): string;
    /**
     * @returns the value of the tranfer
     * @example transfer.value // BigNumber
     */
    get value(): BigNumber;
}
//# sourceMappingURL=Erc20Transfer.d.ts.map