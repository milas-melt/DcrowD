import { MoralisDataObject, BigNumber } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { EvmNative } from '../EvmNative';
import { EvmNftTransferInput, EvmNftTransferData } from './types';
/**
 * Valid input for a new EvmNftTransfer instance.
 * This can be an existing {@link EvmNftTransfer} or a valid {@link EvmNftTransferInput} object
 */
export declare type EvmNftTransferish = EvmNftTransferInput | EvmNftTransfer;
/**
 * The EvmNftTransfer is a representation of a completed NFT transfer.
 *
 * @category DataType
 */
export declare class EvmNftTransfer implements MoralisDataObject {
    /**
     * Create a new instance of EvmNftTransfer from any valid transfer input
     * @param data - the EvmNftTransferish type
     * @example
     * ```
     * const transfer = EvmNftTransfer.create(data);
     *```
     */
    static create(data: EvmNftTransferish): EvmNftTransfer;
    private _data;
    constructor(data: EvmNftTransferInput);
    static parse: (data: EvmNftTransferInput) => EvmNftTransferData;
    /**
     * Check the equality between two NFT transfers. The compares the chain, blockHash, tokenId and logIndex.
     * @param dataA - The first transfer to compare
     * @param dataB - The second transfer to compare
     * @example EvmNftTransfer.equals(dataA, dataB)
     * @returns true if the transfers are equal, false otherwise
     */
    static equals(dataA: EvmNftTransferish, dataB: EvmNftTransferish): boolean;
    /**
     * Checks the equality of the current transfer instance with another nft transfer
     * @param data - the transfer to compare with
     * @example transaction.equals(data)
     * @returns true if the transfers are equal, false otherwise
     */
    equals(data: EvmNftTransferish): boolean;
    /**
     * @returns a JSON represention of the transfer.
     * @example
     * ```
     * transfer.toJSON()
     * ```
     */
    toJSON(): {
        chain: string | number;
        blockNumber: string;
        fromAddress: string | undefined;
        toAddress: string;
        tokenAddress: string;
        value: string | undefined;
        operator: string | undefined;
        amount?: number | undefined;
        blockHash: string;
        blockTimestamp: Date;
        contractType: string;
        logIndex: number;
        tokenId: string;
        transactionHash: string;
        transactionIndex?: number | undefined;
        transactionType?: string | undefined;
    };
    /**
     * @returns a JSON represention of the transfer.
     * @example
     * ```
     * transfer.format()
     * ```
     */
    format(): {
        chain: string | number;
        blockNumber: string;
        fromAddress: string | undefined;
        toAddress: string;
        tokenAddress: string;
        value: string | undefined;
        operator: string | undefined;
        amount?: number | undefined;
        blockHash: string;
        blockTimestamp: Date;
        contractType: string;
        logIndex: number;
        tokenId: string;
        transactionHash: string;
        transactionIndex?: number | undefined;
        transactionType?: string | undefined;
    };
    /**
     * @returns all the data without casting it to JSON.
     * @example transfer.result
     */
    get result(): EvmNftTransferData;
    /**
     * @returns the chain of the transfer.
     * @example transfer.chain // EvmChain
     */
    get chain(): EvmChain;
    /**
     * @returns the block hash of the transfer.
     * @example transfer.blockHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
     */
    get blockHash(): string;
    /**
     * @returns the block number of the transfer.
     * @example transfer.blockNumber // BigNumber
     */
    get blockNumber(): BigNumber;
    /**
     * @returns the block timestamp of the transfer.
     * @example transfer.blockTimestamp // Date
     */
    get blockTimestamp(): Date;
    /**
     * @returns the from address of the transfer.
     * @example transfer.fromAddress // EvmAddress
     */
    get fromAddress(): EvmAddress | undefined;
    /**
     * @returns the to address of the transfer.
     * @example transfer.toAddress // EvmAddress
     */
    get toAddress(): EvmAddress;
    /**
     * @returns the token address of the transfer.
     * @example transfer.tokenAddress // EvmAddress
     */
    get tokenAddress(): EvmAddress;
    /**
     * @returns the token id of the transfer.
     * @example transfer.tokenId // "15"
     */
    get tokenId(): string;
    /**
     * @returns the amount of the transfer.
     * @example transfer.amount // 1
     */
    get amount(): number | undefined;
    /**
     * @returns the value of the transfer.
     * @example transfer.value // EvmNative
     */
    get value(): EvmNative | undefined;
    /**
     * @returns the log index of the transfer.
     * @example transfer.logIndex // 0
     */
    get logIndex(): number;
    /**
     * @returns the transaction hash of the transfer.
     * @example transfer.transactionHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
     */
    get transactionHash(): string;
    /**
     * @returns the transaction index of the transfer.
     * @example transfer.transactionIndex // 123
     */
    get transactionIndex(): number | undefined;
    /**
     * @returns the transaction type of the transfer.
     * @example transfer.transactionType // "1"
     */
    get transactionType(): string | undefined;
    /**
     * @returns the operator of the transfer.
     * @example transfer.operator // EvmAddress
     */
    get operator(): EvmAddress | undefined;
    /**
     * @returns the contract type of the transfer.
     * @example transfer.contractType // "ERC721"
     */
    get contractType(): string;
}
//# sourceMappingURL=EvmNftTransfer.d.ts.map