"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmTransactionLog = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
/**
 * The EvmTransactionLog class is a MoralisData that references an EVM transaction log.
 *
 * @category DataType
 */
var EvmTransactionLog = /** @class */ (function () {
    function EvmTransactionLog(value, core) {
        this._value = EvmTransactionLog.parse(value, core);
    }
    /**
     * Create a new instance of EvmTransactionLog from any valid address input
     *
     * @example
     * ```
     * const log = EvmTransactionLog.create(value, core);
     * ```
     * @param value - A valid EvmTransactionLogish
     * @param core - The MoralisCore instance
     */
    EvmTransactionLog.create = function (value, core) {
        if (value instanceof EvmTransactionLog) {
            return value;
        }
        var finalCore = core !== null && core !== void 0 ? core : core_1.MoralisCoreProvider.getDefault();
        return new EvmTransactionLog(value, finalCore);
    };
    EvmTransactionLog.parse = function (value, core) {
        return {
            logIndex: (0, core_1.maybe)(value.logIndex),
            transactionHash: value.transactionHash,
            transactionIndex: (0, core_1.maybe)(value.transactionIndex),
            data: value.data,
            topics: value.topics,
            blockHash: value.blockHash,
            blockNumber: value.blockNumber,
            blockTimestamp: value.blockTimestamp,
            address: EvmAddress_1.EvmAddress.create(value.address, core),
            chain: EvmChain_1.EvmChain.create(value.chain, core),
        };
    };
    /**
     * Compares the log to another log for equality.
     *
     * @param value - The value to compare with
     * @returns true if the logs are equal, otherwise false
     * @example
     * ```ts
     * log.equals(log);
     * ```
     */
    EvmTransactionLog.prototype.equals = function (value) {
        return (value._value.transactionHash === this._value.transactionHash &&
            value._value.address.equals(this._value.address) &&
            value._value.logIndex === this._value.logIndex &&
            value._value.chain.equals(this._value.chain));
    };
    /**
     * Converts the log to a JSON object.
     *
     * @returns the EvmTransactionLog as a JSON object
     * @example
     * ```ts
     * log.toJSON();
     * ```
     */
    EvmTransactionLog.prototype.toJSON = function () {
        var _a;
        var value = this._value;
        return __assign(__assign({}, value), { address: value.address.format(), chain: (_a = value.chain) === null || _a === void 0 ? void 0 : _a.format() });
    };
    /**
     * Converts the log to a JSON object.
     *
     * @returns the EvmTransactionLog as a JSON object
     * @example
     * ```ts
     * log.format();
     * ```
     */
    EvmTransactionLog.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmTransactionLog.prototype, "result", {
        /**
         * Returns the processed Erc20Token.
         *
         * @returns the EvmTransactionLog value
         * @example
         * ```ts
         * log.result;
         *  ```
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "transactionHash", {
        /**
         * @returns the transaction hash of the log.
         *
         * @example
         * ```ts
         * log.transactionHash; // "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
         * ```
         */
        get: function () {
            return this._value.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "address", {
        /**
         * Returns the address of the log.
         *
         * @example
         * ```ts
         * log.address; // EvmAddress
         * ```
         */
        get: function () {
            return this._value.address;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "logIndex", {
        /**
         * @returns the log index of the log.
         *
         * @example
         * ```ts
         * log.logIndex; // 273
         * ```
         */
        get: function () {
            return this._value.logIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "data", {
        /**
         * @returns the data of the log.
         *
         * @example
         * ```ts
         * log.data; // "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
         * ```
         */
        get: function () {
            return this._value.data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "topics", {
        /**
         * @returns the topics of the log.
         *
         * @example
         * ```ts
         * log.topics; // ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]
         * ```
         */
        get: function () {
            return this._value.topics;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "blockHash", {
        /**
         * @returns the block hash of the log.
         *
         * @example
         * ```ts
         * log.blockHash; // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
         * ```
         */
        get: function () {
            return this._value.blockHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "blockNumber", {
        /**
         * @returns the block number of the log.
         *
         * @example
         * ```ts
         * log.blockNumber; // 12386788
         * ```
         */
        get: function () {
            return this._value.blockNumber;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "blockTimestamp", {
        /**
         * @returns the block timestamp of the log.
         *
         * @example
         * ```ts
         * log.blockTimestamp; // "2021-05-07T11:08:35.000Z"
         * ```
         */
        get: function () {
            return this._value.blockTimestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmTransactionLog.prototype, "chain", {
        /**
         * @returns the chainId for the particular log.
         *
         * @example
         * ```ts
         * log.chainId; // "1"
         * ```
         */
        get: function () {
            return this._value.chain;
        },
        enumerable: false,
        configurable: true
    });
    return EvmTransactionLog;
}());
exports.EvmTransactionLog = EvmTransactionLog;
//# sourceMappingURL=EvmTransactionLog.js.map