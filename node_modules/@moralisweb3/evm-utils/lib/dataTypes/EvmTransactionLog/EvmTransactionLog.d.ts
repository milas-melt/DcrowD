import MoralisCore, { MoralisDataObject } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmTransactionLogData, EvmTransactionLogInput } from './types';
import { EvmChain } from '../EvmChain';
/**
 * This can be any valid {@link EvmTransactionLogInput} or {@link EvmTransactionLog}.
 */
export declare type EvmTransactionLogish = EvmTransactionLogInput | EvmTransactionLog;
/**
 * The EvmTransactionLog class is a MoralisData that references an EVM transaction log.
 *
 * @category DataType
 */
export declare class EvmTransactionLog implements MoralisDataObject {
    /**
     * Create a new instance of EvmTransactionLog from any valid address input
     *
     * @example
     * ```
     * const log = EvmTransactionLog.create(value, core);
     * ```
     * @param value - A valid EvmTransactionLogish
     * @param core - The MoralisCore instance
     */
    static create(value: EvmTransactionLogish, core?: MoralisCore): EvmTransactionLog;
    private _value;
    constructor(value: EvmTransactionLogInput, core: MoralisCore);
    static parse(value: EvmTransactionLogInput, core: MoralisCore): EvmTransactionLogData;
    /**
     * Compares the log to another log for equality.
     *
     * @param value - The value to compare with
     * @returns true if the logs are equal, otherwise false
     * @example
     * ```ts
     * log.equals(log);
     * ```
     */
    equals(value: this): boolean;
    /**
     * Converts the log to a JSON object.
     *
     * @returns the EvmTransactionLog as a JSON object
     * @example
     * ```ts
     * log.toJSON();
     * ```
     */
    toJSON(): {
        address: string;
        chain: string | number;
        logIndex?: number | undefined;
        transactionHash: string;
        transactionIndex?: number | undefined;
        data: string;
        topics: string[];
        blockHash: string;
        blockNumber: number;
        blockTimestamp?: string | undefined;
    };
    /**
     * Converts the log to a JSON object.
     *
     * @returns the EvmTransactionLog as a JSON object
     * @example
     * ```ts
     * log.format();
     * ```
     */
    format(): {
        address: string;
        chain: string | number;
        logIndex?: number | undefined;
        transactionHash: string;
        transactionIndex?: number | undefined;
        data: string;
        topics: string[];
        blockHash: string;
        blockNumber: number;
        blockTimestamp?: string | undefined;
    };
    /**
     * Returns the processed Erc20Token.
     *
     * @returns the EvmTransactionLog value
     * @example
     * ```ts
     * log.result;
     *  ```
     */
    get result(): EvmTransactionLogData;
    /**
     * @returns the transaction hash of the log.
     *
     * @example
     * ```ts
     * log.transactionHash; // "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
     * ```
     */
    get transactionHash(): string;
    /**
     * Returns the address of the log.
     *
     * @example
     * ```ts
     * log.address; // EvmAddress
     * ```
     */
    get address(): EvmAddress;
    /**
     * @returns the log index of the log.
     *
     * @example
     * ```ts
     * log.logIndex; // 273
     * ```
     */
    get logIndex(): number | undefined;
    /**
     * @returns the data of the log.
     *
     * @example
     * ```ts
     * log.data; // "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
     * ```
     */
    get data(): string;
    /**
     * @returns the topics of the log.
     *
     * @example
     * ```ts
     * log.topics; // ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]
     * ```
     */
    get topics(): string[];
    /**
     * @returns the block hash of the log.
     *
     * @example
     * ```ts
     * log.blockHash; // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
     * ```
     */
    get blockHash(): string;
    /**
     * @returns the block number of the log.
     *
     * @example
     * ```ts
     * log.blockNumber; // 12386788
     * ```
     */
    get blockNumber(): number;
    /**
     * @returns the block timestamp of the log.
     *
     * @example
     * ```ts
     * log.blockTimestamp; // "2021-05-07T11:08:35.000Z"
     * ```
     */
    get blockTimestamp(): string | undefined;
    /**
     * @returns the chainId for the particular log.
     *
     * @example
     * ```ts
     * log.chainId; // "1"
     * ```
     */
    get chain(): EvmChain;
}
//# sourceMappingURL=EvmTransactionLog.d.ts.map