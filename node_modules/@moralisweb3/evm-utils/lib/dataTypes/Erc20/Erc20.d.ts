import MoralisCore, { MoralisDataObject } from '@moralisweb3/core';
import { EvmAddress } from '../EvmAddress';
import { EvmChain } from '../EvmChain';
import { Erc20Input, Erc20Data } from './types';
/**
 * This can be any valid {@link Erc20Input} or {@link Erc20Token}.
 */
export declare type Erc20Tokenish = Erc20Input | Erc20Token;
/**
 * The Erc20Token class is a MoralisData that references to a Erc20 Token
 * It holds data about the data and metadata of an Erc20 token
 *
 * @category DataType
 */
export declare class Erc20Token implements MoralisDataObject {
    /**
     *  Create a new instance of Erc20Token from any valid Erc20Token input
     *
     * @param value - the Erc20Tokenish type
     * @example
     * ```ts
     * const token = Erc20Token.create(value);
     * ```
     */
    static create(value: Erc20Tokenish, core?: MoralisCore): Erc20Token;
    private readonly _value;
    private constructor();
    static parse: (value: Erc20Input, core: MoralisCore) => Erc20Data;
    /**
     * Compares two Erc20Token instances. This checks if the chain and contractAddress of both tokens are equal.
     *
     * @param valueA - the first Erc20Token to compare
     * @param valueB - the second Erc20Token to compare
     * @returns true if the two Erc20Tokens are equal
     * @example
     * ```ts
     * Erc20Token.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: Erc20Tokenish, valueB: Erc20Tokenish): boolean;
    /**
     * Compares Erc20Token instance to current instance
     *
     * @param value - the Erc20Tokenish to compare
     * @returns true if the Erc20Token is equals given token
     * @example
     * ```ts
     * token.equals(value);
     * ```
     */
    equals(value: Erc20Tokenish): boolean;
    /**
     * Returns the token as JSON
     *
     * @returns the Erc20Token as a JSON object
     * @example
     * ```ts
     * token.toJSON();
     * ```
     */
    toJSON(): {
        contractAddress: string;
        chain: string | number;
        decimals: number;
        name: string;
        symbol: string;
        logo?: string | null | undefined;
        logoHash?: string | null | undefined;
        thumbnail?: string | null | undefined;
    };
    /**
     * Returns the token as JSON
     *
     * @returns the Erc20Token as a JSON object
     * @example
     * ```ts
     * token.format();
     * ```
     */
    format(): {
        contractAddress: string;
        chain: string | number;
        decimals: number;
        name: string;
        symbol: string;
        logo?: string | null | undefined;
        logoHash?: string | null | undefined;
        thumbnail?: string | null | undefined;
    };
    /**
     * Returns the processed Erc20Token.
     *
     * @returns the Erc20Token value
     * @example
     * ```ts
     * token.result;
     *  ```
     */
    get result(): Erc20Data;
    /**
     * @returns the decimals of the token.
     *
     * @example
     * ```ts
     * token.decimals;
     * ```
     */
    get decimals(): number;
    /**
     * @returns The name of the token.
     *
     * @example
     * ```ts
     * token.name;
     * ```
     */
    get name(): string;
    /**
     * @returns The symbol of the token.
     *
     * @example
     * ```ts
     * token.symbol;
     * ```
     */
    get symbol(): string;
    /**
     * @returns The contract address of the token.
     *
     * @example
     * ```ts
     * token.contractAddress;
     * ```
     */
    get contractAddress(): EvmAddress;
    /**
     * @returns The chain of the token.
     *
     * @example
     * ```ts
     * token.chain;
     * ```
     */
    get chain(): EvmChain;
    /**
     * @returns The logo of the token.
     *
     * @example
     * ```ts
     * token.logo;
     * ```
     */
    get logo(): string | null | undefined;
    /**
     * @returns The logo hash of the token.
     *
     * @example
     * ```ts
     * token.logoHash;
     * ```
     */
    get logoHash(): string | null | undefined;
    /**
     * @returns The thumbnail of the token.
     *
     * @example
     * ```ts
     * token.thumbnail;
     * ```
     */
    get thumbnail(): string | null | undefined;
}
//# sourceMappingURL=Erc20.d.ts.map