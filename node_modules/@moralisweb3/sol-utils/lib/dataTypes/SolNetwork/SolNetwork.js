"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolNetwork = void 0;
var core_1 = require("@moralisweb3/core");
var solNetworkNames = ['mainnet', 'devnet'];
/**
 * A representation of a Solana network.
 *
 * @category DataType
 */
var SolNetwork = /** @class */ (function () {
    function SolNetwork(network) {
        this.network = network;
    }
    Object.defineProperty(SolNetwork, "MAINNET", {
        /**
         * Returns MAINNET network
         *
         * @example SolNetwork.MAINNET
         */
        get: function () {
            return SolNetwork.create('mainnet');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SolNetwork, "DEVNET", {
        /**
         * Returns DEVNET network
         *
         * @example SolNetwork.MAINNET
         */
        get: function () {
            return SolNetwork.create('devnet');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create a new instance of SolNetwork from any valid network input.
     *
     * @example `const network = SolNetwork.create("mainnet")`
     * @throws an error when a passed network is invalid.
     */
    SolNetwork.create = function (network) {
        return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));
    };
    SolNetwork.parse = function (network) {
        if (typeof network === 'string') {
            if (!solNetworkNames.includes(network)) {
                throw new core_1.MoralisCoreError({
                    code: core_1.CoreErrorCode.INVALID_ARGUMENT,
                    message: "Solana network is not supported: ".concat(network),
                });
            }
        }
        return network;
    };
    /**
     * Formats the network to a specific format.
     * Currently returns a string representing the network.
     * @example network.format(); // "mainnet"
     */
    SolNetwork.prototype.format = function () {
        // TODO: add `format` argument
        return this.network;
    };
    /**
     * Checks the equality of the current network with another Solana network.
     * @example `network.equals("mainnet")`
     * @example `network.equals(SolNetwork.create("mainnet"))`
     */
    SolNetwork.prototype.equals = function (network) {
        return this.network === SolNetwork.create(network).network;
    };
    /**
     * @returns a string representing the network.
     * @example network.toJSON(); // "mainnet"
     */
    SolNetwork.prototype.toJSON = function () {
        return this.network;
    };
    /**
     * @returns a string representing the network.
     * @example network.toString(); // "mainnet"
     */
    SolNetwork.prototype.toString = function () {
        return this.network;
    };
    return SolNetwork;
}());
exports.SolNetwork = SolNetwork;
//# sourceMappingURL=SolNetwork.js.map