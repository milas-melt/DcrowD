import { MoralisData, MoralisDataFormatted } from '@moralisweb3/core';
declare const solNetworkNames: readonly ["mainnet", "devnet"];
/**
 * A name of Solana network.
 *
 * @example "mainnet"
 * @example "devnet"
 */
export declare type SolNetworkName = typeof solNetworkNames[number];
/**
 * A name of Solana network.
 *
 * @example "mainnet"
 * @example "devnet"
 */
export declare type SolNetworkNameish = SolNetworkName | string;
/**
 * Valid input for a new SolNetwork instance.
 * This can be an existing SolNetwork or a valid network name.
 *
 * @example "mainnet"
 * @example "devnet"
 * @example SolNetwork.create("mainnet")
 */
export declare type SolNetworkish = SolNetwork | SolNetworkNameish;
/**
 * A representation of a Solana network.
 *
 * @category DataType
 */
export declare class SolNetwork implements MoralisData {
    readonly network: SolNetworkName;
    /**
     * Returns MAINNET network
     *
     * @example SolNetwork.MAINNET
     */
    static get MAINNET(): SolNetwork;
    /**
     * Returns DEVNET network
     *
     * @example SolNetwork.MAINNET
     */
    static get DEVNET(): SolNetwork;
    /**
     * Create a new instance of SolNetwork from any valid network input.
     *
     * @example `const network = SolNetwork.create("mainnet")`
     * @throws an error when a passed network is invalid.
     */
    static create(network: SolNetworkish): SolNetwork;
    private static parse;
    private constructor();
    /**
     * Formats the network to a specific format.
     * Currently returns a string representing the network.
     * @example network.format(); // "mainnet"
     */
    format(): MoralisDataFormatted;
    /**
     * Checks the equality of the current network with another Solana network.
     * @example `network.equals("mainnet")`
     * @example `network.equals(SolNetwork.create("mainnet"))`
     */
    equals(network: SolNetworkish): boolean;
    /**
     * @returns a string representing the network.
     * @example network.toJSON(); // "mainnet"
     */
    toJSON(): string;
    /**
     * @returns a string representing the network.
     * @example network.toString(); // "mainnet"
     */
    toString(): string;
}
export {};
//# sourceMappingURL=SolNetwork.d.ts.map