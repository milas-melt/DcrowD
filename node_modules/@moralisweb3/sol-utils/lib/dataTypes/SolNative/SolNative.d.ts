import { MoralisData, MoralisDataFormatted, BigNumberish, BigNumber } from '@moralisweb3/core';
/**
 * Type containing valid Solana native units
 */
export declare type SolNativeUnit = 'solana' | 'lamports' | number;
/**
 * Valid input for a new SolNative instance.
 * This can be an existing {@link SolNative} or a valid {@link BigNumberish} type
 */
export declare type SolNativeish = SolNative | BigNumberish;
export declare class SolNative implements MoralisData {
    private readonly rawValue;
    /**
     * Create a new instance of SolNative from any valid {@link SolNativeish} value.
     * @param value - the value to create the SolNative from
     * @param unit - the unit of the value (optional), defaults to `solana`
     * @returns a new instance of SolNative
     * @example
     * ```ts
     * const native = SolNative.create(2, 'lamports');
     * const native = SolNative.create(2);
     *```
     */
    static create(value: SolNativeish, unit?: SolNativeUnit): SolNative;
    private static parse;
    private constructor();
    /**
     * Compares two SolNativeish values.
     * @param valueA - the first value to compare
     * @param valueB - the second value to compare
     * @returns true if the values are equal
     * @example
     * ```ts
     * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true
     * ```
     */
    static equals(valueA: SolNativeish, valueB: SolNativeish): boolean;
    /**
     * Compares SolNative with current instance.
     * @param value - the value to compare with
     * @returns true if the values are equal
     * @example
     * ```ts
     * const native = SolNative.create(2, 'lamports');
     * native.equals(SolNative.create(1)); // false
     * ```
     */
    equals(value: SolNative): boolean;
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.format()`
     */
    format(): MoralisDataFormatted;
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.toJSON()`
     */
    toJSON(): string;
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.toString()`
     */
    toString(): string;
    /**
     * @returns the value of the SolNative as a BigNumber
     * @example `native.value`
     */
    get value(): BigNumber;
    /**
     * Converts the SolNative to a solana unit.
     * @returns the value of the SolNative as a solana string
     * @example `native.solana`
     */
    get solana(): string;
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.lamports`
     */
    get lamports(): string;
}
//# sourceMappingURL=SolNative.d.ts.map