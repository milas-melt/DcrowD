"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolNative = void 0;
var core_1 = require("@moralisweb3/core");
var unitToDecimals = {
    solana: 9,
    lamports: 0,
};
var SolNative = /** @class */ (function () {
    function SolNative(rawValue) {
        this.rawValue = rawValue;
    }
    /**
     * Create a new instance of SolNative from any valid {@link SolNativeish} value.
     * @param value - the value to create the SolNative from
     * @param unit - the unit of the value (optional), defaults to `solana`
     * @returns a new instance of SolNative
     * @example
     * ```ts
     * const native = SolNative.create(2, 'lamports');
     * const native = SolNative.create(2);
     *```
     */
    SolNative.create = function (value, unit) {
        if (value instanceof SolNative) {
            return value;
        }
        return new SolNative(SolNative.parse(value, unit));
    };
    SolNative.parse = function (value, unit) {
        if (unit === void 0) { unit = 'solana'; }
        var decimal;
        if (typeof unit === 'number') {
            decimal = unit;
        }
        else if (unitToDecimals[unit] !== undefined) {
            decimal = unitToDecimals[unit];
        }
        else {
            throw new core_1.MoralisCoreError({
                code: core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: "Not supported Solana unit: ".concat(unit),
            });
        }
        return core_1.BigNumber.fromDecimal(value.toString(), decimal);
    };
    /**
     * Compares two SolNativeish values.
     * @param valueA - the first value to compare
     * @param valueB - the second value to compare
     * @returns true if the values are equal
     * @example
     * ```ts
     * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true
     * ```
     */
    SolNative.equals = function (valueA, valueB) {
        var solNativeA = SolNative.create(valueA);
        var solNativeB = SolNative.create(valueB);
        return solNativeA.lamports === solNativeB.lamports;
    };
    /**
     * Compares SolNative with current instance.
     * @param value - the value to compare with
     * @returns true if the values are equal
     * @example
     * ```ts
     * const native = SolNative.create(2, 'lamports');
     * native.equals(SolNative.create(1)); // false
     * ```
     */
    SolNative.prototype.equals = function (value) {
        return SolNative.equals(this, value);
    };
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.format()`
     */
    SolNative.prototype.format = function () {
        // TODO: add `format` argument
        return this.lamports;
    };
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.toJSON()`
     */
    SolNative.prototype.toJSON = function () {
        return this.lamports;
    };
    /**
     * Converts the SolNative to a string.
     * @returns the value of the SolNative as a string
     * @example `native.toString()`
     */
    SolNative.prototype.toString = function () {
        return this.lamports;
    };
    Object.defineProperty(SolNative.prototype, "value", {
        /**
         * @returns the value of the SolNative as a BigNumber
         * @example `native.value`
         */
        get: function () {
            return this.rawValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SolNative.prototype, "solana", {
        /**
         * Converts the SolNative to a solana unit.
         * @returns the value of the SolNative as a solana string
         * @example `native.solana`
         */
        get: function () {
            return this.rawValue.toDecimal(unitToDecimals['solana']);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SolNative.prototype, "lamports", {
        /**
         * Converts the SolNative to a string.
         * @returns the value of the SolNative as a string
         * @example `native.lamports`
         */
        get: function () {
            return this.rawValue.toString();
        },
        enumerable: false,
        configurable: true
    });
    return SolNative;
}());
exports.SolNative = SolNative;
//# sourceMappingURL=SolNative.js.map