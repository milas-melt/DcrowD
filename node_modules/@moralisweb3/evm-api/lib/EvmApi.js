"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoralisEvmApi = void 0;
var core_1 = require("@moralisweb3/core");
var token_1 = require("./resolvers/token");
var defi_1 = require("./resolvers/defi");
var resolve_1 = require("./resolvers/resolve");
var block_1 = require("./resolvers/block");
var ipfs_1 = require("./resolvers/ipfs");
var EvmApiConfigSetup_1 = require("./config/EvmApiConfigSetup");
var api_utils_1 = require("@moralisweb3/api-utils");
var utils_1 = require("./resolvers/utils");
var nft_1 = require("./resolvers/nft");
var events_1 = require("./resolvers/events");
var transaction_1 = require("./resolvers/transaction");
var balance_1 = require("./resolvers/balance");
var BASE_URL = 'https://deep-index.moralis.io/api/v2';
var MoralisEvmApi = /** @class */ (function (_super) {
    __extends(MoralisEvmApi, _super);
    function MoralisEvmApi(core) {
        var _this = _super.call(this, MoralisEvmApi.moduleName, core, BASE_URL) || this;
        _this.endpoints = new api_utils_1.Endpoints(_this.core, BASE_URL);
        _this.nft = {
            getNFTTransfersByBlock: _this.endpoints.createPaginatedFetcher(nft_1.getNFTTransfersByBlock),
            getWalletNFTs: _this.endpoints.createPaginatedFetcher(nft_1.getWalletNFTs),
            getWalletNFTTransfers: _this.endpoints.createPaginatedFetcher(nft_1.getWalletNFTTransfers),
            getNFTTrades: _this.endpoints.createPaginatedFetcher(nft_1.getNFTTrades),
            getNFTLowestPrice: _this.endpoints.createNullableFetcher(nft_1.getNFTLowestPrice),
            searchNFTs: _this.endpoints.createPaginatedFetcher(nft_1.searchNFTs),
            getNFTTransfersFromToBlock: _this.endpoints.createPaginatedFetcher(nft_1.getNFTTransfersFromToBlock),
            getContractNFTs: _this.endpoints.createPaginatedFetcher(nft_1.getContractNFTs),
            getNFTOwners: _this.endpoints.createPaginatedFetcher(nft_1.getNFTOwners),
            getNFTContractMetadata: _this.endpoints.createNullableFetcher(nft_1.getNFTContractMetadata),
            reSyncMetadata: _this.endpoints.createFetcher(nft_1.reSyncMetadata),
            getNFTMetadata: _this.endpoints.createNullableFetcher(nft_1.getNFTMetadata),
            getNFTTokenIdOwners: _this.endpoints.createPaginatedFetcher(nft_1.getNFTTokenIdOwners),
            getNFTTransfers: _this.endpoints.createPaginatedFetcher(nft_1.getNFTTransfers),
            syncNFTContract: _this.endpoints.createFetcher(nft_1.syncNFTContract),
            getNFTContractTransfers: _this.endpoints.createPaginatedFetcher(nft_1.getNFTContractTransfers),
            getWalletNFTCollections: _this.endpoints.createPaginatedFetcher(nft_1.getWalletNFTCollections),
        };
        _this._token = {
            getTokenTransfers: _this.endpoints.createPaginatedFetcher(token_1.getTokenTransfers),
        };
        _this.token = {
            getWalletTokenBalances: _this.endpoints.createFetcher(token_1.getWalletTokenBalances),
            getWalletTokenTransfers: _this.endpoints.createPaginatedFetcher(token_1.getWalletTokenTransfers),
            getTokenMetadata: _this.endpoints.createFetcher(token_1.getTokenMetadata),
            getTokenMetadataBySymbol: _this.endpoints.createFetcher(token_1.getTokenMetadataBySymbol),
            getTokenPrice: _this.endpoints.createFetcher(token_1.getTokenPrice),
            getTokenTransfers: _this._token.getTokenTransfers,
            getTokenAllowance: _this.endpoints.createFetcher(token_1.getTokenAllowance),
            /**
             * @deprecated Replaced by `nft.getContractNFTs()`.
             */
            getAllTokenIds: _this.deprecationWarning('token.getAllTokenIds', 'nft.getContractNFTs', _this.nft.getContractNFTs),
            /**
             * @deprecated Replaced by `nft.getNFTContractTransfers()`.
             */
            getContractNFTTransfers: _this.deprecationWarning('token.getContractNFTTransfers', 'nft.getNFTContractTransfers', _this.nft.getNFTContractTransfers),
            /**
             * @deprecated Replaced by `nft.getNFTLowestPrice()`.
             */
            getNFTLowestPrice: _this.deprecationWarning('token.getNFTLowestPrice', 'nft.getNFTLowestPrice', _this.nft.getNFTLowestPrice),
            /**
             * @deprecated Replaced by `nft.getNFTContractMetadata()`.
             */
            getNFTMetadata: _this.deprecationWarning('token.getNFTMetadata', 'nft.getNFTContractMetadata', _this.nft.getNFTContractMetadata),
            /**
             * @deprecated Replaced by `nft.getNFTOwners()`.
             */
            getNFTOwners: _this.deprecationWarning('token.getNFTOwners', 'nft.getNFTOwners', _this.nft.getNFTOwners),
            /**
             * @deprecated Replaced by `nft.getNFTTrades()`.
             */
            getNFTTrades: _this.deprecationWarning('token.getNFTTrades', 'nft.getNFTTrades', _this.nft.getNFTTrades),
            /**
             * @deprecated Replaced by `nft.getNFTTransfersFromToBlock()`.
             */
            getNftTransfersFromToBlock: _this.deprecationWarning('token.getNftTransfersFromToBlock', 'nft.getNFTTransfersFromToBlock', _this.nft.getNFTTransfersFromToBlock),
            /**
             * @deprecated Replaced by `token.getTokenTransfers()`.
             */
            getTokenAddressTransfers: _this.deprecationWarning('token.getTokenAddressTransfers', 'token.getTokenTransfers', _this._token.getTokenTransfers),
            /**
             * @deprecated Replaced by `nft.getNFTMetadata()`.
             */
            getTokenIdMetadata: _this.deprecationWarning('token.getTokenIdMetadata', 'nft.getNFTMetadata', _this.nft.getNFTMetadata),
            /**
             * @deprecated Replaced by `nft.getNFTTokenIdOwners()`.
             */
            getTokenIdOwners: _this.deprecationWarning('token.getTokenIdOwners', 'nft.getNFTTokenIdOwners', _this.nft.getNFTTokenIdOwners),
            /**
             * @deprecated Replaced by `nft.getNFTTransfers()`.
             */
            getWalletTokenIdTransfers: _this.deprecationWarning('token.getWalletTokenIdTransfers', 'nft.getNFTTransfers', _this.nft.getNFTTransfers),
            /**
             * @deprecated Replaced by `nft.reSyncMetadata()`.
             */
            reSyncMetadata: _this.deprecationWarning('token.reSyncMetadata', 'nft.reSyncMetadata', _this.nft.reSyncMetadata),
            /**
             * @deprecated Replaced by `nft.searchNFTs()`.
             */
            searchNFTs: _this.deprecationWarning('token.searchNFTs', 'nft.searchNFTs', _this.nft.searchNFTs),
            /**
             * @deprecated Replaced by `nft.syncNFTContract()`.
             */
            syncNFTContract: _this.deprecationWarning('token.syncNFTContract', 'nft.syncNFTContract', _this.nft.syncNFTContract),
        };
        /**
         * @deprecated This property will be removed soon.
         */
        _this.contract = {
            /**
             * @deprecated Replaced by `nft.syncNFTContract()`.
             */
            syncNFTContract: _this.deprecationWarning('token.syncNFTContract', 'nft.syncNFTContract', _this.nft.syncNFTContract),
        };
        _this.defi = {
            getPairAddress: _this.endpoints.createFetcher(defi_1.getPairAddress),
            getPairReserves: _this.endpoints.createFetcher(defi_1.getPairReserves),
        };
        _this.events = {
            getContractEvents: _this.endpoints.createPaginatedFetcher(events_1.getContractEvents),
            getContractLogs: _this.endpoints.createPaginatedFetcher(events_1.getContractLogs),
        };
        _this.transaction = {
            getTransaction: _this.endpoints.createNullableFetcher(transaction_1.getTransaction),
            getWalletTransactions: _this.endpoints.createPaginatedFetcher(transaction_1.getWalletTransactions),
        };
        _this.balance = {
            getNativeBalance: _this.endpoints.createFetcher(balance_1.getNativeBalance),
        };
        /**
         * @deprecated This property will be removed soon.
         */
        _this.account = {
            /**
             * @deprecated Replaced by `balance.getNativeBalance()`.
             */
            getNativeBalance: _this.deprecationWarning('account.getNativeBalance', 'balance.getNativeBalance', _this.balance.getNativeBalance),
            /**
             * @deprecated Replaced by `nft.getWalletNFTs()`.
             */
            getNFTs: _this.deprecationWarning('account.getNFTs', 'nft.getWalletNFTs', _this.nft.getWalletNFTs),
            /**
             * @deprecated Replaced by `nft.getWalletNFTs()`. Same func as `getWalletNFTs()`.
             */
            getNFTsForContract: _this.deprecationWarning('account.getNFTsForContract', 'nft.getWalletNFTs', _this.nft.getWalletNFTs),
            /**
             * @deprecated Replaced by `nft.getWalletNFTTransfers()`.
             */
            getNFTTransfers: _this.deprecationWarning('account.getNFTTransfers', 'nft.getWalletNFTTransfers', _this.nft.getWalletNFTTransfers),
            /**
             * @deprecated Replaced by `token.getWalletTokenBalances()`.
             */
            getTokenBalances: _this.deprecationWarning('account.getTokenBalances', 'token.getWalletTokenBalances', _this.token.getWalletTokenBalances),
            /**
             * @deprecated Replaced by `token.getWalletTokenTransfers()`.
             */
            getTokenTransfers: _this.deprecationWarning('account.getTokenTransfers', 'token.getWalletTokenTransfers', _this.token.getWalletTokenTransfers),
            /**
             * @deprecated Replaced by `transaction.getWalletTransactions()`.
             */
            getTransactions: _this.deprecationWarning('account.getTransactions', 'transaction.getWalletTransactions', _this.transaction.getWalletTransactions),
            /**
             * @deprecated Replaced by `transaction.getWalletTransactions()`.
             */
            getWalletNFTCollections: _this.deprecationWarning('account.getWalletNFTCollections', 'nft.getWalletNFTCollections', _this.nft.getWalletNFTCollections),
        };
        _this.block = {
            getBlock: _this.endpoints.createNullableFetcher(block_1.getBlock),
            getDateToBlock: _this.endpoints.createFetcher(block_1.getDateToBlock),
        };
        _this.resolve = {
            resolveAddress: _this.endpoints.createNullableFetcher(resolve_1.resolveAddress),
            resolveDomain: _this.endpoints.createNullableFetcher(resolve_1.resolveDomain),
        };
        _this.ipfs = {
            uploadFolder: _this.endpoints.createFetcher(ipfs_1.uploadFolder),
        };
        /**
         * @deprecated This property will be removed soon.
         */
        _this.storage = {
            /**
             * @deprecated Replaced by `storage.uploadFolder()`.
             */
            uploadFolder: _this.deprecationWarning('storage.uploadFolder', 'ipfs.uploadFolder', _this.ipfs.uploadFolder),
        };
        _this._utils = {
            endpointWeights: _this.endpoints.createFetcher(utils_1.endpointWeights),
            web3ApiVersion: _this.endpoints.createFetcher(utils_1.web3ApiVersion),
        };
        _this.utils = {
            runContractFunction: _this.endpoints.createFetcher(utils_1.runContractFunction),
            web3ApiVersion: function () { return _this._utils.web3ApiVersion({}); },
            endpointWeights: function () { return _this._utils.endpointWeights({}); },
        };
        /**
         * @deprecated This property will be removed soon.
         */
        _this.native = {
            /**
             * @deprecated Replaced by `block.getDateToBlock()`.
             */
            getDateToBlock: _this.deprecationWarning('native.getDateToBlock', 'block.getDateToBlock', _this.block.getDateToBlock),
            /**
             * @deprecated Replaced by `block.getBlock()`.
             */
            getBlock: _this.deprecationWarning('native.getBlock', 'block.getBlock', _this.block.getBlock),
            /**
             * @deprecated Replaced by `events.getContractEvents()`.
             */
            getContractEvents: _this.deprecationWarning('native.getContractEvents', 'events.getContractEvents', _this.events.getContractEvents),
            /**
             * @deprecated Replaced by `events.getContractLogs()`.
             */
            getLogsByAddress: _this.deprecationWarning('native.getLogsByAddress', 'events.getContractLogs', _this.events.getContractLogs),
            /**
             * @deprecated Replaced by `nft.getNFTTransfersByBlock()`.
             */
            getNFTTransfersByBlock: _this.deprecationWarning('native.getNFTTransfersByBlock', 'nft.getNFTTransfersByBlock', _this.nft.getNFTTransfersByBlock),
            /**
             * @deprecated Replaced by `transaction.getTransaction()`.
             */
            getTransaction: _this.deprecationWarning('native.getTransaction', 'transaction.getTransaction', _this.transaction.getTransaction),
            /**
             * @deprecated Replaced by `utils.runContractFunction()`.
             */
            runContractFunction: _this.deprecationWarning('native.runContractFunction', 'utils.runContractFunction', _this.utils.runContractFunction),
        };
        /**
         * @deprecated This property will be removed soon.
         */
        _this.info = {
            /**
             * @deprecated Replaced by `utils.endpointWeights()`.
             */
            endpointWeights: function (_params) {
                return _this.deprecationWarning('info.endpointWeights', 'utils.endpointWeights', _this._utils.endpointWeights)({});
            },
            /**
             * @deprecated Replaced by `utils.web3ApiVersion()`.
             */
            web3ApiVersion: function (_params) {
                return _this.deprecationWarning('info.web3ApiVersion', 'utils.web3ApiVersion', _this._utils.web3ApiVersion)({});
            },
        };
        return _this;
    }
    MoralisEvmApi.create = function (core) {
        return new MoralisEvmApi(core !== null && core !== void 0 ? core : core_1.MoralisCoreProvider.getDefault());
    };
    MoralisEvmApi.prototype.setup = function () {
        EvmApiConfigSetup_1.EvmApiConfigSetup.register(this.core.config);
    };
    MoralisEvmApi.prototype.start = function () {
        // Nothing
    };
    MoralisEvmApi.prototype.deprecationWarning = function (oldName, newName, fetcher) {
        var _this = this;
        return function (params) {
            _this.logger.warn("".concat(oldName, "() is depreciated and will be removed soon. Please use ").concat(newName, "()"));
            return fetcher(params);
        };
    };
    MoralisEvmApi.moduleName = 'evmApi';
    return MoralisEvmApi;
}(core_1.ApiModule));
exports.MoralisEvmApi = MoralisEvmApi;
//# sourceMappingURL=EvmApi.js.map