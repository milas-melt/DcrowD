"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenMetadata = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getTokenMetadata = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getTokenMetadata',
        getUrl: function () { return "/erc20/metadata"; },
        apiToResult: function (data, params) {
            return (data !== null && data !== void 0 ? data : []).map(function (token) {
                return {
                    token: evm_utils_1.Erc20Token.create(__assign(__assign({}, (0, core_1.toCamelCase)(token)), { contractAddress: token.address, chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core) }), core),
                    blockNumber: token.block_number,
                    validated: token.validated,
                };
            });
        },
        resultToJson: function (data) { return data.map(function (item) { return (__assign(__assign({}, item), { token: item.token.toJSON() })); }); },
        parseParams: function (params) { return ({
            providerUrl: params.providerUrl || undefined,
            subdomain: params.subdomain || undefined,
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            addresses: params.addresses.map(function (address) { return evm_utils_1.EvmAddress.create(address, core).lowercase; }),
        }); },
    });
});
//# sourceMappingURL=getTokenMetadata.js.map