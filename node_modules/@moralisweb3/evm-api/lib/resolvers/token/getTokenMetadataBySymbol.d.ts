import { Camelize } from '@moralisweb3/core';
import { Erc20Token, EvmChainish } from '@moralisweb3/evm-utils';
import { operations } from '../../generated/types';
declare type operation = 'getTokenMetadataBySymbol';
declare type QueryParams = operations[operation]['parameters']['query'];
declare type ApiParams = QueryParams;
export interface Params extends Camelize<Omit<ApiParams, 'chain'>> {
    chain?: EvmChainish;
}
export declare const getTokenMetadataBySymbol: import("@moralisweb3/api-utils").EndpointFactory<{
    chain?: "eth" | "0x1" | "ropsten" | "0x3" | "rinkeby" | "0x4" | "goerli" | "0x5" | "kovan" | "0x2a" | "sepolia" | "0xaa36a7" | "polygon" | "0x89" | "mumbai" | "0x13881" | "bsc" | "0x38" | "bsc testnet" | "0x61" | "avalanche" | "0xa86a" | "avalanche testnet" | "0xa869" | "fantom" | "0xfa" | "cronos" | "0x19" | "cronos testnet" | "0x152" | undefined;
    subdomain?: string | undefined;
    symbols: string[];
}, Params, {
    address: string;
    name: string;
    symbol: string;
    decimals: string;
    logo?: string | undefined;
    logo_hash?: string | undefined;
    thumbnail?: string | undefined;
    block_number?: string | undefined;
    validated?: string | undefined;
}[], {
    token: Erc20Token;
    blockNumber: string | undefined;
    validated: string | undefined;
}[], {
    token: {
        contractAddress: string;
        chain: string | number;
        decimals: number;
        name: string;
        symbol: string;
        logo?: string | null | undefined;
        logoHash?: string | null | undefined;
        thumbnail?: string | null | undefined;
    };
    blockNumber: string | undefined;
    validated: string | undefined;
}[]>;
export {};
//# sourceMappingURL=getTokenMetadataBySymbol.d.ts.map