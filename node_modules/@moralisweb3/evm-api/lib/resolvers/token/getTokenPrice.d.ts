import { Camelize } from '@moralisweb3/core';
import { EvmNative, EvmAddress, EvmChainish, EvmAddressish } from '@moralisweb3/evm-utils';
import { operations } from '../../generated/types';
declare type operation = 'getTokenPrice';
declare type QueryParams = operations[operation]['parameters']['query'];
declare type PathParams = operations[operation]['parameters']['path'];
declare type ApiParams = QueryParams & PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'chain' | 'address' | 'to_block'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
    toBlock?: number;
}
export declare const getTokenPrice: import("@moralisweb3/api-utils").EndpointFactory<ApiParams, Params, {
    nativePrice?: {
        value: string;
        decimals: number;
        name: string;
        symbol: string;
    } | undefined;
    usdPrice: number;
    exchangeAddress?: string | undefined;
    exchangeName?: string | undefined;
} & {
    symbol: unknown;
}, {
    nativePrice: EvmNative | null;
    exchangeAddress: EvmAddress | null;
    usdPrice: number;
    exchangeName?: string | undefined;
    symbol: unknown;
}, {
    exchangeAddress: string | null;
    nativePrice: string | null;
    usdPrice: number;
    exchangeName?: string | undefined;
    symbol: unknown;
}>;
export {};
//# sourceMappingURL=getTokenPrice.d.ts.map