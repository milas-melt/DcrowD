"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenPrice = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getTokenPrice = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getTokenPrice',
        urlParams: ['address'],
        getUrl: function (params) { return "/erc20/".concat(params.address, "/price"); },
        apiToResult: function (data, _) {
            var _a, _b, _c;
            return (__assign(__assign({}, (0, core_1.toCamelCase)(data)), { nativePrice: ((_a = data.nativePrice) === null || _a === void 0 ? void 0 : _a.value)
                    ? evm_utils_1.EvmNative.create((_b = data.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = data.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals)
                    : null, exchangeAddress: data.exchangeAddress ? evm_utils_1.EvmAddress.create(data.exchangeAddress, core) : null }));
        },
        resultToJson: function (data) { return (__assign(__assign({}, data), { exchangeAddress: data.exchangeAddress ? data.exchangeAddress.format() : null, nativePrice: data.nativePrice ? data.nativePrice.format() : null })); },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            address: evm_utils_1.EvmAddress.create(params.address, core).lowercase,
            exchange: params.exchange,
            to_block: params.toBlock,
            providerUrl: params.providerUrl,
        }); },
    });
});
//# sourceMappingURL=getTokenPrice.js.map