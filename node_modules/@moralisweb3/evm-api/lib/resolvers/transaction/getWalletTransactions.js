"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWalletTransactions = void 0;
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getWalletTransactions = (0, api_utils_1.createPaginatedEndpointFactory)(function (core) {
    return (0, api_utils_1.createPaginatedEndpoint)({
        name: 'getWalletTransactions',
        urlParams: ['address'],
        getUrl: function (params) { return "/".concat(params.address); },
        apiToResult: function (data, params) {
            var _a;
            return ((_a = data.result) !== null && _a !== void 0 ? _a : []).map(function (transaction) {
                return evm_utils_1.EvmTransaction.create({
                    cumulativeGasUsed: transaction.receipt_cumulative_gas_used,
                    gasPrice: transaction.gas_price,
                    gasUsed: transaction.receipt_gas_used,
                    index: +transaction.transaction_index,
                    contractAddress: transaction.receipt_contract_address,
                    receiptRoot: transaction.receipt_root,
                    receiptStatus: +transaction.receipt_status,
                    chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                    data: transaction.input,
                    from: transaction.from_address,
                    hash: transaction.hash,
                    nonce: transaction.nonce,
                    value: transaction.value,
                    blockHash: transaction.block_hash,
                    blockNumber: +transaction.block_number,
                    blockTimestamp: new Date(transaction.block_timestamp),
                    gas: core_1.BigNumber.create(transaction.gas),
                    to: transaction.to_address,
                });
            });
        },
        resultToJson: function (data) { return data.map(function (transaction) { return transaction.toJSON(); }); },
        parseParams: function (params) { return (__assign(__assign({}, params), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex, address: evm_utils_1.EvmAddress.create(params.address, core).lowercase, to_block: params.toBlock, from_block: params.fromBlock, from_date: params.fromDate, to_date: params.toDate })); },
        firstPageIndex: 0,
    });
});
//# sourceMappingURL=getWalletTransactions.js.map