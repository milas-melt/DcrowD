"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransaction = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getTransaction = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getTransaction',
        urlParams: ['transactionHash'],
        getUrl: function (params) { return "/transaction/".concat(params.transactionHash); },
        apiToResult: function (data, params) {
            var _a;
            return evm_utils_1.EvmTransaction.create({
                from: data.from_address,
                to: data.to_address,
                value: data.value,
                gasPrice: data.gas_price,
                gasUsed: data.receipt_gas_used,
                data: data.input,
                nonce: data.nonce,
                blockHash: data.block_hash,
                blockNumber: data.block_number,
                blockTimestamp: data.block_timestamp,
                index: data.transaction_index,
                chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                hash: data.hash,
                gas: data.gas,
                cumulativeGasUsed: data.receipt_cumulative_gas_used,
                contractAddress: data.receipt_contract_address,
                logs: ((_a = data.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {
                    return evm_utils_1.EvmTransactionLog.create({
                        address: log.address,
                        blockHash: log.block_hash,
                        blockNumber: +log.block_number,
                        data: log.data,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
                        transactionHash: log.transaction_hash,
                        blockTimestamp: log.block_timestamp,
                        logIndex: +log.log_index,
                        transactionIndex: +log.transaction_index,
                        chain: EvmChainResolver_1.EvmChainResolver.resolve(log.chainId, core),
                    }, core);
                }),
                receiptRoot: data.receipt_root,
                receiptStatus: data.receipt_status,
            }, core);
        },
        resultToJson: function (data) { return data.toJSON(); },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            subdomain: params.subdomain || undefined,
            transaction_hash: params.transactionHash,
        }); },
    });
});
//# sourceMappingURL=getTransaction.js.map