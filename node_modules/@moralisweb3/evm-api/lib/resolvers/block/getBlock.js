"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlock = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
var apiToResult = function (core, apiData, params) {
    var _a;
    var data = (0, core_1.toCamelCase)(apiData);
    return evm_utils_1.EvmBlock.create(__assign(__assign({}, data), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core), transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {
            var _a;
            return evm_utils_1.EvmTransaction.create({
                cumulativeGasUsed: transaction.receiptCumulativeGasUsed,
                gasPrice: transaction.gasPrice,
                gasUsed: transaction.receiptGasUsed,
                index: transaction.transactionIndex,
                contractAddress: transaction.receiptContractAddress,
                receiptRoot: transaction.receiptRoot,
                receiptStatus: +transaction.receiptStatus,
                chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                data: transaction.input,
                from: transaction.fromAddress,
                hash: transaction.hash,
                nonce: transaction.nonce,
                value: transaction.value,
                blockHash: transaction.blockHash,
                blockNumber: +transaction.blockNumber,
                blockTimestamp: new Date(transaction.blockTimestamp),
                gas: transaction.gas,
                to: transaction.toAddress,
                logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {
                    return evm_utils_1.EvmTransactionLog.create({
                        address: log.address,
                        blockHash: log.blockHash,
                        blockNumber: +log.blockNumber,
                        data: log.data,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
                        transactionHash: log.transactionHash,
                        blockTimestamp: log.blockTimestamp,
                        logIndex: +log.logIndex,
                        transactionIndex: +log.transactionIndex,
                        chain: log.chainId,
                    });
                }),
            }, core);
        }) }), core);
};
exports.getBlock = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getBlock',
        urlParams: ['blockNumberOrHash'],
        getUrl: function (params) { return "/block/".concat(params.blockNumberOrHash); },
        apiToResult: function (result, params) {
            return apiToResult(core, result, params);
        },
        resultToJson: function (data) { return data.toJSON(); },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            block_number_or_hash: params.blockNumberOrHash,
            subdomain: params.subdomain,
        }); },
    });
});
//# sourceMappingURL=getBlock.js.map