import { Camelize } from '@moralisweb3/core';
import { EvmChainish, EvmBlock } from '@moralisweb3/evm-utils';
import { operations } from '../../generated/types';
declare type operation = 'getBlock';
declare type QueryParams = operations[operation]['parameters']['query'];
declare type PathParams = operations[operation]['parameters']['path'];
declare type ApiParams = QueryParams & PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'chain'>> {
    chain?: EvmChainish;
}
export declare const getBlock: import("@moralisweb3/api-utils").EndpointFactory<ApiParams, Params, {
    timestamp: string;
    number: string;
    hash: string;
    parent_hash: string;
    nonce: string;
    sha3_uncles: string;
    logs_bloom: string;
    transactions_root: string;
    state_root: string;
    receipts_root: string;
    miner: string;
    difficulty: string;
    total_difficulty: string;
    size: string;
    extra_data: string;
    gas_limit: string;
    gas_used: string;
    transaction_count: string;
    transactions: {
        hash: string;
        nonce: string;
        transaction_index: string;
        from_address: string;
        to_address: string;
        value: string;
        gas?: string | undefined;
        gas_price: string;
        input: string;
        receipt_cumulative_gas_used: string;
        receipt_gas_used: string;
        receipt_contract_address?: string | undefined;
        receipt_root?: string | undefined;
        receipt_status: string;
        block_timestamp: string;
        block_number: string;
        block_hash: string;
        logs: {
            chainId: string;
            log_index: string;
            transaction_hash: string;
            transaction_index: string;
            address: string;
            data: string;
            topic0: string;
            topic1?: string | undefined;
            topic2?: string | undefined;
            topic3?: string | undefined;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
        }[];
    }[];
}, EvmBlock, {
    number: string;
    difficulty: string;
    totalDifficulty: string;
    size: string;
    gasLimit: string;
    gasUsed: string;
    chain: string | number;
    miner: string;
    transactions: {
        to: string | undefined;
        from: string;
        nonce: string | undefined;
        gas: string | undefined;
        gasPrice: string;
        gasUsed: string;
        cumulativeGasUsed: string;
        blockNumber: string;
        value: string | undefined;
        chain: string | number;
        contractAddress: string | undefined;
        logs: {
            address: string;
            chain: string | number;
            logIndex?: number | undefined;
            transactionHash: string;
            transactionIndex?: number | undefined;
            data: string;
            topics: string[];
            blockHash: string;
            blockNumber: number;
            blockTimestamp?: string | undefined;
        }[];
        blockTimestamp: string;
        data?: string | undefined;
        hash: string;
        type?: number | undefined;
        index: number;
        blockHash: string;
        receiptRoot?: string | undefined;
        receiptStatus?: number | undefined;
    }[];
    timestamp: Date;
    hash: string;
    parentHash: string;
    nonce: string;
    sha3Uncles: string;
    logsBloom: string;
    transactionsRoot: string;
    stateRoot: string;
    receiptsRoot: string;
    extraData: string;
    transactionCount: number;
}>;
export {};
//# sourceMappingURL=getBlock.d.ts.map