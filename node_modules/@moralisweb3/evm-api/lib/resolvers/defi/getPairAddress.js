"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPairAddress = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getPairAddress = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getPairAddress',
        urlParams: ['token0Address', 'token1Address'],
        getUrl: function (params) { return "/".concat(params.token0Address, "/").concat(params.token1Address, "/pairAddress"); },
        // TODO: refactor to reduce complexity
        // eslint-disable-next-line complexity
        apiToResult: function (data, params) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
            return ({
                //   ApiResult types generated all come as undefined which should not be the case TODO:
                token0: {
                    token: evm_utils_1.Erc20Token.create({
                        contractAddress: ((_a = data.token0) === null || _a === void 0 ? void 0 : _a.address) ? evm_utils_1.EvmAddress.create((_b = data.token0) === null || _b === void 0 ? void 0 : _b.address) : '',
                        decimals: (_d = (_c = data.token0) === null || _c === void 0 ? void 0 : _c.decimals) !== null && _d !== void 0 ? _d : 0,
                        name: (_f = (_e = data.token0) === null || _e === void 0 ? void 0 : _e.name) !== null && _f !== void 0 ? _f : '',
                        symbol: (_h = (_g = data.token0) === null || _g === void 0 ? void 0 : _g.symbol) !== null && _h !== void 0 ? _h : '',
                        logo: (_j = data.token0) === null || _j === void 0 ? void 0 : _j.logo,
                        thumbnail: (_k = data.token0) === null || _k === void 0 ? void 0 : _k.thumbnail,
                        chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                    }, core),
                    blockNumber: (_l = data.token0) === null || _l === void 0 ? void 0 : _l.block_number,
                    validated: (_m = data.token0) === null || _m === void 0 ? void 0 : _m.validated,
                    createdAt: ((_o = data.token0) === null || _o === void 0 ? void 0 : _o.created_at) ? new Date((_p = data.token0) === null || _p === void 0 ? void 0 : _p.created_at) : undefined,
                },
                token1: {
                    token: evm_utils_1.Erc20Token.create({
                        contractAddress: ((_q = data.token0) === null || _q === void 0 ? void 0 : _q.address) ? evm_utils_1.EvmAddress.create((_r = data.token0) === null || _r === void 0 ? void 0 : _r.address, core) : '',
                        decimals: (_t = (_s = data.token1) === null || _s === void 0 ? void 0 : _s.decimals) !== null && _t !== void 0 ? _t : 0,
                        name: (_v = (_u = data.token1) === null || _u === void 0 ? void 0 : _u.name) !== null && _v !== void 0 ? _v : '',
                        symbol: (_x = (_w = data.token1) === null || _w === void 0 ? void 0 : _w.symbol) !== null && _x !== void 0 ? _x : '',
                        logo: (_y = data.token1) === null || _y === void 0 ? void 0 : _y.logo,
                        thumbnail: (_z = data.token1) === null || _z === void 0 ? void 0 : _z.thumbnail,
                        chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                    }, core),
                    blockNumber: (_0 = data.token1) === null || _0 === void 0 ? void 0 : _0.block_number,
                    validated: (_1 = data.token1) === null || _1 === void 0 ? void 0 : _1.validated,
                    createdAt: ((_2 = data.token1) === null || _2 === void 0 ? void 0 : _2.created_at) ? new Date((_3 = data.token1) === null || _3 === void 0 ? void 0 : _3.created_at) : undefined,
                },
                pairAddress: data.pairAddress ? evm_utils_1.EvmAddress.create(data.pairAddress) : undefined,
            });
        },
        resultToJson: function (data) { return (__assign(__assign({}, data), { token0: __assign(__assign({}, data.token0), { token: data.token0.token.toJSON() }), token1: __assign(__assign({}, data.token1), { token: data.token1.token.toJSON() }), pairAddress: data.pairAddress ? data.pairAddress.format() : undefined })); },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            token0_address: evm_utils_1.EvmAddress.create(params.token0Address, core).lowercase,
            token1_address: evm_utils_1.EvmAddress.create(params.token1Address, core).lowercase,
            exchange: params.exchange,
            to_block: params.toBlock,
            to_date: params.toDate,
        }); },
    });
});
//# sourceMappingURL=getPairAddress.js.map