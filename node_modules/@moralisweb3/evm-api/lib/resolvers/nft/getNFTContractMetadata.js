"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTContractMetadata = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getNFTContractMetadata = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getNFTContractMetadata',
        urlParams: ['address'],
        getUrl: function (params) { return "/nft/".concat(params.address, "/metadata"); },
        apiToResult: function (data, params) {
            return evm_utils_1.EvmNftMetadata.create(__assign(__assign({}, (0, core_1.toCamelCase)(data)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core), tokenAddress: evm_utils_1.EvmAddress.create(data.token_address, core), syncedAt: data.synced_at ? new Date(data.synced_at) : null, contractType: (0, core_1.maybe)(data.contract_type) }));
        },
        resultToJson: function (data) { return data.toJSON(); },
        parseParams: function (params) { return ({
            chain: params.chain ? evm_utils_1.EvmChain.create(params.chain, core).apiHex : undefined,
            address: evm_utils_1.EvmAddress.create(params.address, core).lowercase,
        }); },
    });
});
//# sourceMappingURL=getNFTContractMetadata.js.map