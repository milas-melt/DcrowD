import { PaginatedParams } from '@moralisweb3/api-utils';
import { Camelize } from '@moralisweb3/core';
import { EvmChainish, EvmAddressish, EvmNft } from '@moralisweb3/evm-utils';
import { operations } from '../../generated/types';
declare type operation = 'getContractNFTs';
declare type QueryParams = operations[operation]['parameters']['query'];
declare type PathParams = operations[operation]['parameters']['path'];
declare type ApiParams = QueryParams & PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'chain' | 'address'>>, PaginatedParams {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export declare const getContractNFTs: import("@moralisweb3/api-utils").PaginatedEndpointFactory<ApiParams, Params, {
    token_address: string;
    token_id: string;
    owner_of?: string | undefined;
    token_hash?: string | undefined;
    block_number?: string | undefined;
    block_number_minted?: string | undefined;
    contract_type: string;
    token_uri?: string | undefined;
    metadata?: string | undefined;
    last_token_uri_sync?: string | undefined;
    last_metadata_sync?: string | undefined;
    amount?: string | undefined;
    name: string;
    symbol: string;
}[] | undefined, EvmNft[], {
    tokenAddress: string;
    chain: string | number;
    ownerOf: string | undefined;
    blockNumberMinted: string | undefined;
    blockNumber: string | undefined;
    tokenId: string | number;
    contractType?: string | undefined;
    tokenUri?: string | undefined;
    tokenHash?: string | undefined;
    metadata?: import("@moralisweb3/core").MoralisDataObjectValue | undefined;
    name?: string | undefined;
    symbol?: string | undefined;
    lastMetadataSync?: Date | undefined;
    lastTokenUriSync?: Date | undefined;
    amount?: number | undefined;
}[]>;
export {};
//# sourceMappingURL=getContractNFTs.d.ts.map