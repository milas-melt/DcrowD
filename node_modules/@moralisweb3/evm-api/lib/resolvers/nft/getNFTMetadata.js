"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTMetadata = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getNFTMetadata = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'getNFTMetadata',
        urlParams: ['address', 'tokenId'],
        getUrl: function (params) { return "/nft/".concat(params.address, "/").concat(params.tokenId); },
        apiToResult: function (data, params) {
            return evm_utils_1.EvmNft.create(__assign(__assign({}, (0, core_1.toCamelCase)(data)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core), ownerOf: data.owner_of ? evm_utils_1.EvmAddress.create(data.owner_of, core) : undefined, lastMetadataSync: data.last_metadata_sync ? new Date(data.last_metadata_sync) : undefined, lastTokenUriSync: data.last_token_uri_sync ? new Date(data.last_token_uri_sync) : undefined }), core);
        },
        resultToJson: function (data) { return data.toJSON(); },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            address: evm_utils_1.EvmAddress.create(params.address, core).lowercase,
            token_id: params.tokenId,
            format: params.format,
        }); },
    });
});
//# sourceMappingURL=getNFTMetadata.js.map