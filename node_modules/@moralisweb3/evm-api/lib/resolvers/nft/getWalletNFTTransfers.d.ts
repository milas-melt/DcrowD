import { Camelize } from '@moralisweb3/core';
import { EvmChainish, EvmAddressish, EvmNftTransfer } from '@moralisweb3/evm-utils';
import { operations } from '../../generated/types';
import { PaginatedParams } from '@moralisweb3/api-utils';
declare type operation = 'getWalletNFTTransfers';
declare type QueryParams = operations[operation]['parameters']['query'];
declare type PathParams = operations[operation]['parameters']['path'];
declare type ApiParams = QueryParams & PathParams;
export interface Params extends Camelize<Omit<ApiParams, 'chain' | 'address'>>, PaginatedParams {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export declare const getWalletNFTTransfers: import("@moralisweb3/api-utils").PaginatedEndpointFactory<ApiParams, Params, {
    token_address: string;
    token_id: string;
    from_address?: string | undefined;
    to_address: string;
    value?: string | undefined;
    amount?: string | undefined;
    contract_type: string;
    block_number: string;
    block_timestamp: string;
    block_hash: string;
    transaction_hash: string;
    transaction_type?: string | undefined;
    transaction_index?: number | undefined;
    log_index: number;
    operator?: string | undefined;
}[], EvmNftTransfer[], {
    chain: string | number;
    blockNumber: string;
    fromAddress: string | undefined;
    toAddress: string;
    tokenAddress: string;
    value: string | undefined;
    operator: string | undefined;
    amount?: number | undefined;
    blockHash: string;
    blockTimestamp: Date;
    contractType: string;
    logIndex: number;
    tokenId: string;
    transactionHash: string;
    transactionIndex?: number | undefined;
    transactionType?: string | undefined;
}[]>;
export {};
//# sourceMappingURL=getWalletNFTTransfers.d.ts.map