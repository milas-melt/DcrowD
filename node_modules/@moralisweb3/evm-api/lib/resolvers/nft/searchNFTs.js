"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchNFTs = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.searchNFTs = (0, api_utils_1.createPaginatedEndpointFactory)(function (core) {
    return (0, api_utils_1.createPaginatedEndpoint)({
        name: 'searchNFTs',
        getUrl: function () { return "/nft/search"; },
        apiToResult: function (data, params) {
            var _a;
            return ((_a = data.result) !== null && _a !== void 0 ? _a : []).map(function (nft) { return ({
                token: evm_utils_1.EvmNft.create({
                    chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                    contractType: nft.contract_type,
                    tokenAddress: nft.token_address,
                    tokenId: nft.token_id,
                    tokenUri: nft.token_uri,
                    metadata: nft.metadata,
                    tokenHash: nft.token_hash,
                }, core),
                tokenHash: nft.token_hash,
                blockNumberMinted: nft.block_number_minted,
                lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,
                lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined,
                batchId: nft.batch_id,
                frozen: nft.frozen,
                frozenLogIndex: nft.frozen_log_index,
                imported: nft.imported,
                isValid: nft.is_valid,
                openseaLookup: nft.opensea_lookup,
                resyncing: nft.resyncing,
                syncing: nft.syncing,
                updatedAt: new Date(nft.updatedAt),
            }); });
        },
        resultToJson: function (data) {
            return data.map(function (nft) {
                var _a, _b;
                return (__assign(__assign({}, nft), { token: nft.token.toJSON(), lastMetadataSync: (_a = nft.lastMetadataSync) === null || _a === void 0 ? void 0 : _a.toLocaleDateString(), lastTokenUriSync: (_b = nft.lastTokenUriSync) === null || _b === void 0 ? void 0 : _b.toLocaleDateString(), updatedAt: nft.updatedAt.toLocaleDateString() }));
            });
        },
        parseParams: function (params) {
            var _a;
            return (__assign(__assign({}, params), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex, addresses: (_a = params.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return evm_utils_1.EvmAddress.create(address, core).lowercase; }) }));
        },
        firstPageIndex: 0,
    });
});
//# sourceMappingURL=searchNFTs.js.map