"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTContractTransfers = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getNFTContractTransfers = (0, api_utils_1.createPaginatedEndpointFactory)(function (core) {
    return (0, api_utils_1.createPaginatedEndpoint)({
        name: 'getNFTContractTransfers',
        urlParams: ['address'],
        getUrl: function (params) { return "/nft/".concat(params.address, "/transfers"); },
        apiToResult: function (data, params) {
            var _a;
            return ((_a = data.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
                return evm_utils_1.EvmNftTransfer.create(__assign(__assign({}, (0, core_1.toCamelCase)(transfer)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core), tokenAddress: evm_utils_1.EvmAddress.create(transfer.to_address), toAddress: evm_utils_1.EvmAddress.create(transfer.to_address), operator: transfer.operator ? evm_utils_1.EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? evm_utils_1.EvmAddress.create(transfer.from_address) : null, value: transfer.value ? evm_utils_1.EvmNative.create(transfer.value) : null, blockTimestamp: new Date(transfer.block_timestamp) }));
            });
        },
        resultToJson: function (data) { return data.map(function (transfer) { return transfer.toJSON(); }); },
        parseParams: function (params) { return (__assign(__assign({}, params), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex, address: evm_utils_1.EvmAddress.create(params.address, core).lowercase })); },
        firstPageIndex: 0,
    });
});
//# sourceMappingURL=getNFTContractTransfers.js.map