"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reSyncMetadata = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.reSyncMetadata = (0, api_utils_1.createEndpointFactory)(function (core) {
    return (0, api_utils_1.createEndpoint)({
        name: 'reSyncMetadata',
        urlParams: ['address', 'tokenId'],
        getUrl: function (params) { return "/nft/".concat(params.address, "/").concat(params.tokenId, "/metadata/resync"); },
        apiToResult: function (data) { return (__assign({}, data)); },
        resultToJson: function (data) { return data; },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            address: evm_utils_1.EvmAddress.create(params.address, core).lowercase,
            token_id: params.tokenId,
            flag: params.flag,
            mode: params.mode,
        }); },
    });
});
//# sourceMappingURL=reSyncMetadata.js.map