"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTTrades = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getNFTTrades = (0, api_utils_1.createPaginatedEndpointFactory)(function (core) {
    return (0, api_utils_1.createPaginatedEndpoint)({
        name: 'getNFTTrades',
        urlParams: ['address'],
        getUrl: function (params) { return "/nft/".concat(params.address, "/trades"); },
        apiToResult: function (data, params) {
            var _a;
            return ((_a = data.result) !== null && _a !== void 0 ? _a : []).map(function (trade) {
                return evm_utils_1.EvmNftTrade.create(__assign(__assign({}, (0, core_1.toCamelCase)(trade)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core), sellerAddress: evm_utils_1.EvmAddress.create(trade.seller_address, core), buyerAddress: evm_utils_1.EvmAddress.create(trade.buyer_address, core), marketplaceAddress: evm_utils_1.EvmAddress.create(trade.marketplace_address, core), tokenAddress: evm_utils_1.EvmAddress.create(trade.token_address, core), price: evm_utils_1.EvmNative.create(trade.price), blockTimestamp: new Date(trade.block_timestamp), tokenIds: trade.token_ids }));
            });
        },
        resultToJson: function (data) { return data.map(function (trade) { return trade.toJSON(); }); },
        parseParams: function (params) { return (__assign(__assign({}, params), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex, address: evm_utils_1.EvmAddress.create(params.address, core).lowercase, to_block: params.toBlock, from_block: params.fromBlock, from_date: params.fromDate, to_date: params.toDate, provider_url: params.providerUrl })); },
        firstPageIndex: 0,
    });
});
//# sourceMappingURL=getNFTTrades.js.map