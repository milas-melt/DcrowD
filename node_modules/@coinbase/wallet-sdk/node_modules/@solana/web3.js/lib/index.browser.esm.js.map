{"version":3,"file":"index.browser.esm.js","sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/layout.ts","../src/util/bigint.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/sysvar.ts","../src/transaction-constants.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/system-program.ts","../src/address-lookup-table-program.ts","../src/bpf-loader-deprecated.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/loader.ts","../src/bpf-loader.ts","../src/compute-budget.ts","../node_modules/fast-stable-stringify/index.js","../src/util/url-impl.ts","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/util/tx-expiry-custom-errors.ts","../src/util/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport * as bigintLayout from './util/bigint';\nimport {SystemProgram} from './system-program';\nimport {TransactionInstruction} from './transaction';\nimport {decodeData, encodeData, IInstructionInputData} from './instruction';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const URL = globalThis.URL;\nexport const URLSearchParams = globalThis.URLSearchParams;\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {URL} from './url-impl';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {URL} from './util/url-impl';\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './address-lookup-table-program';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/tx-expiry-custom-errors';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","assert","inherits_browserModule","require$$0","require$$1","utils","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","BlockHash","common","ft_1","ch32","maj32","s0_256","s1_256","g0_256","g1_256","shaCommon","require$$2","require$$3","SHA256","SHA512","require$$4","version","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","slice","createProgramAddressSync","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","isOnCurve","pubkeyData","pubkey","default","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","encodeData","allocLength","Layout","layoutFields","instruction","index","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","args","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","message","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","prototype","hasOwnProperty","call","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","splice","unshift","signedKeys","unsignedKeys","compiledInstructions","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","authority","payer","Number","decodeExtendLookupTable","addresses","lookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","BPF_LOADER_DEPRECATED_PROGRAM_ID","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","URL","globalThis","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","makeWebsocketUrl","endpoint","url","useHttps","protocol","host","port","String","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","rawConfig","_buildArgsAtLeastConfirmed","getBlockProduction","extra","rest","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","includeAccounts","originalTx","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","update","digest","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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AAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAChD,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,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AE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;AACtD,CAAC,CAAC;AACF;AACA,IAAI,EAAE,GAAG;AACT,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;AACtD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,CAAC,CAAC;AACF;AACA,IAAI,CAAC,GAAG;AACR,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACxD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;AACxD,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;AACxD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACxD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAA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"}